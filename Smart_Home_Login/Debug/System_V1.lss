
System_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002da6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00002da6  00002e3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000e6  008000e6  00002ec0  2**0
                  ALLOC
  3 .stab         0000261c  00000000  00000000  00002ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f79  00000000  00000000  000054dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006455  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006595  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006705  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000834e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009239  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a148  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a3d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aba3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__vector_1>
       8:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__vector_2>
       c:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3e       	cpi	r26, 0xED	; 237
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <main>
      8a:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa eb       	ldi	r26, 0xBA	; 186
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a eb       	ldi	r24, 0xBA	; 186
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/*1- Set RS low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	65 e0       	ldi	r22, 0x05	; 5
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>

	/*2- Set RW low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	66 e0       	ldi	r22, 0x06	; 6
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>

	/*3- Send the command to LCD*/
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_u8Command);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 96 09 	call	0x132c	; 0x132c <DIO_u8SetPortValue>

	/*4- Send enable pulse to LCD*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	67 e0       	ldi	r22, 0x07	; 7
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	67 e0       	ldi	r22, 0x07	; 7
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>


}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	/*1- Set RS high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	65 e0       	ldi	r22, 0x05	; 5
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>

	/*2- Set RW low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	66 e0       	ldi	r22, 0x06	; 6
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>

	/*3- Send data to LCD*/
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_u8Data);
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 96 09 	call	0x132c	; 0x132c <DIO_u8SetPortValue>

	/*4- Send enable pulse to LCD*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	67 e0       	ldi	r22, 0x07	; 7
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendData+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	67 e0       	ldi	r22, 0x07	; 7
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>

}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	2e 97       	sbiw	r28, 0x0e	; 14
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e2       	ldi	r26, 0x20	; 32
     dd8:	b2 e4       	ldi	r27, 0x42	; 66
     dda:	8b 87       	std	Y+11, r24	; 0x0b
     ddc:	9c 87       	std	Y+12, r25	; 0x0c
     dde:	ad 87       	std	Y+13, r26	; 0x0d
     de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6b 85       	ldd	r22, Y+11	; 0x0b
     de4:	7c 85       	ldd	r23, Y+12	; 0x0c
     de6:	8d 85       	ldd	r24, Y+13	; 0x0d
     de8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a ef       	ldi	r20, 0xFA	; 250
     df0:	54 e4       	ldi	r21, 0x44	; 68
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8f 83       	std	Y+7, r24	; 0x07
     dfc:	98 87       	std	Y+8, r25	; 0x08
     dfe:	a9 87       	std	Y+9, r26	; 0x09
     e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e02:	6f 81       	ldd	r22, Y+7	; 0x07
     e04:	78 85       	ldd	r23, Y+8	; 0x08
     e06:	89 85       	ldd	r24, Y+9	; 0x09
     e08:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <CLCD_voidInit+0x66>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	8d 83       	std	Y+5, r24	; 0x05
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <CLCD_voidInit+0xc6>
     e66:	88 ec       	ldi	r24, 0xC8	; 200
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <CLCD_voidInit+0xb4>
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <CLCD_voidInit+0xa8>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <CLCD_voidInit+0xf0>
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	/*1- Function set command:2 lines, 5x7 font*/
	CLCD_voidSendCommand(0b00111000);
     eb6:	88 e3       	ldi	r24, 0x38	; 56
     eb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*2- Display on/off control:display on, blink cursor off*/
	CLCD_voidSendCommand(0b00001100);
     ebc:	8c e0       	ldi	r24, 0x0C	; 12
     ebe:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*3- Display clear*/
	CLCD_voidSendCommand(0b00000001);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

}
     ec8:	2e 96       	adiw	r28, 0x0e	; 14
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_u8String)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <CLCD_voidSendString+0x6>
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	9b 83       	std	Y+3, r25	; 0x03
     ee8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     eea:	19 82       	std	Y+1, r1	; 0x01
     eec:	0e c0       	rjmp	.+28     	; 0xf0a <CLCD_voidSendString+0x30>
	while(Copy_u8String[i]!=NULL)
	{
		CLCD_voidSendData(Copy_u8String[i]);
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	fc 01       	movw	r30, r24
     efa:	e2 0f       	add	r30, r18
     efc:	f3 1f       	adc	r31, r19
     efe:	80 81       	ld	r24, Z
     f00:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	    i++;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_u8String)
{
	u8 i = 0;
	while(Copy_u8String[i]!=NULL)
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	fc 01       	movw	r30, r24
     f16:	e2 0f       	add	r30, r18
     f18:	f3 1f       	adc	r31, r19
     f1a:	80 81       	ld	r24, Z
     f1c:	88 23       	and	r24, r24
     f1e:	39 f7       	brne	.-50     	; 0xeee <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_u8String[i]);
	    i++;
	}
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(u32 Copy_u32Number)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	2e 97       	sbiw	r28, 0x0e	; 14
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	6b 87       	std	Y+11, r22	; 0x0b
     f42:	7c 87       	std	Y+12, r23	; 0x0c
     f44:	8d 87       	std	Y+13, r24	; 0x0d
     f46:	9e 87       	std	Y+14, r25	; 0x0e
	u8 Local_u8Iterator=10;
     f48:	8a e0       	ldi	r24, 0x0A	; 10
     f4a:	8a 87       	std	Y+10, r24	; 0x0a
	u32 Local_u8ValueHolder=0;
     f4c:	1e 82       	std	Y+6, r1	; 0x06
     f4e:	1f 82       	std	Y+7, r1	; 0x07
     f50:	18 86       	std	Y+8, r1	; 0x08
     f52:	19 86       	std	Y+9, r1	; 0x09
	u8 Local_u8Flag=0;
     f54:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check=1000000000;
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	9a ec       	ldi	r25, 0xCA	; 202
     f5a:	aa e9       	ldi	r26, 0x9A	; 154
     f5c:	bb e3       	ldi	r27, 0x3B	; 59
     f5e:	89 83       	std	Y+1, r24	; 0x01
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	ab 83       	std	Y+3, r26	; 0x03
     f64:	bc 83       	std	Y+4, r27	; 0x04

	for(Local_u8Iterator=10;Local_u8Iterator>=0;Local_u8Iterator--)
     f66:	8a e0       	ldi	r24, 0x0A	; 10
     f68:	8a 87       	std	Y+10, r24	; 0x0a
	{
		if(Copy_u32Number/(Local_u32Check)>0||Local_u8Flag==1)
     f6a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f6c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f6e:	ad 85       	ldd	r26, Y+13	; 0x0d
     f70:	be 85       	ldd	r27, Y+14	; 0x0e
     f72:	29 81       	ldd	r18, Y+1	; 0x01
     f74:	3a 81       	ldd	r19, Y+2	; 0x02
     f76:	4b 81       	ldd	r20, Y+3	; 0x03
     f78:	5c 81       	ldd	r21, Y+4	; 0x04
     f7a:	bc 01       	movw	r22, r24
     f7c:	cd 01       	movw	r24, r26
     f7e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__udivmodsi4>
     f82:	da 01       	movw	r26, r20
     f84:	c9 01       	movw	r24, r18
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	a1 05       	cpc	r26, r1
     f8a:	b1 05       	cpc	r27, r1
     f8c:	19 f4       	brne	.+6      	; 0xf94 <CLCD_voidSendNumber+0x68>
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	e9 f5       	brne	.+122    	; 0x100e <CLCD_voidSendNumber+0xe2>
		{
			Local_u8Flag=1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	8d 83       	std	Y+5, r24	; 0x05
			Local_u8ValueHolder= (Copy_u32Number/(Local_u32Check));
     f98:	8b 85       	ldd	r24, Y+11	; 0x0b
     f9a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f9c:	ad 85       	ldd	r26, Y+13	; 0x0d
     f9e:	be 85       	ldd	r27, Y+14	; 0x0e
     fa0:	29 81       	ldd	r18, Y+1	; 0x01
     fa2:	3a 81       	ldd	r19, Y+2	; 0x02
     fa4:	4b 81       	ldd	r20, Y+3	; 0x03
     fa6:	5c 81       	ldd	r21, Y+4	; 0x04
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__udivmodsi4>
     fb0:	da 01       	movw	r26, r20
     fb2:	c9 01       	movw	r24, r18
     fb4:	8e 83       	std	Y+6, r24	; 0x06
     fb6:	9f 83       	std	Y+7, r25	; 0x07
     fb8:	a8 87       	std	Y+8, r26	; 0x08
     fba:	b9 87       	std	Y+9, r27	; 0x09
			if(Local_u8ValueHolder<0 ||Local_u8ValueHolder>9 )
     fbc:	8e 81       	ldd	r24, Y+6	; 0x06
     fbe:	9f 81       	ldd	r25, Y+7	; 0x07
     fc0:	a8 85       	ldd	r26, Y+8	; 0x08
     fc2:	b9 85       	ldd	r27, Y+9	; 0x09
     fc4:	8a 30       	cpi	r24, 0x0A	; 10
     fc6:	91 05       	cpc	r25, r1
     fc8:	a1 05       	cpc	r26, r1
     fca:	b1 05       	cpc	r27, r1
     fcc:	b0 f5       	brcc	.+108    	; 0x103a <CLCD_voidSendNumber+0x10e>
			    {
				break;
		    	}
			CLCD_voidSendData(Local_u8ValueHolder+48);
     fce:	8e 81       	ldd	r24, Y+6	; 0x06
     fd0:	80 5d       	subi	r24, 0xD0	; 208
     fd2:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
			Copy_u32Number= Copy_u32Number%(Local_u8ValueHolder*(Local_u32Check));
     fd6:	8e 81       	ldd	r24, Y+6	; 0x06
     fd8:	9f 81       	ldd	r25, Y+7	; 0x07
     fda:	a8 85       	ldd	r26, Y+8	; 0x08
     fdc:	b9 85       	ldd	r27, Y+9	; 0x09
     fde:	29 81       	ldd	r18, Y+1	; 0x01
     fe0:	3a 81       	ldd	r19, Y+2	; 0x02
     fe2:	4b 81       	ldd	r20, Y+3	; 0x03
     fe4:	5c 81       	ldd	r21, Y+4	; 0x04
     fe6:	bc 01       	movw	r22, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__mulsi3>
     fee:	9b 01       	movw	r18, r22
     ff0:	ac 01       	movw	r20, r24
     ff2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ff4:	9c 85       	ldd	r25, Y+12	; 0x0c
     ff6:	ad 85       	ldd	r26, Y+13	; 0x0d
     ff8:	be 85       	ldd	r27, Y+14	; 0x0e
     ffa:	bc 01       	movw	r22, r24
     ffc:	cd 01       	movw	r24, r26
     ffe:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__udivmodsi4>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	8b 87       	std	Y+11, r24	; 0x0b
    1008:	9c 87       	std	Y+12, r25	; 0x0c
    100a:	ad 87       	std	Y+13, r26	; 0x0d
    100c:	be 87       	std	Y+14, r27	; 0x0e

		}
		Local_u32Check/=10;
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	ab 81       	ldd	r26, Y+3	; 0x03
    1014:	bc 81       	ldd	r27, Y+4	; 0x04
    1016:	2a e0       	ldi	r18, 0x0A	; 10
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	bc 01       	movw	r22, r24
    1020:	cd 01       	movw	r24, r26
    1022:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__udivmodsi4>
    1026:	da 01       	movw	r26, r20
    1028:	c9 01       	movw	r24, r18
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	9a 83       	std	Y+2, r25	; 0x02
    102e:	ab 83       	std	Y+3, r26	; 0x03
    1030:	bc 83       	std	Y+4, r27	; 0x04
	u8 Local_u8Iterator=10;
	u32 Local_u8ValueHolder=0;
	u8 Local_u8Flag=0;
	u32 Local_u32Check=1000000000;

	for(Local_u8Iterator=10;Local_u8Iterator>=0;Local_u8Iterator--)
    1032:	8a 85       	ldd	r24, Y+10	; 0x0a
    1034:	81 50       	subi	r24, 0x01	; 1
    1036:	8a 87       	std	Y+10, r24	; 0x0a
    1038:	98 cf       	rjmp	.-208    	; 0xf6a <CLCD_voidSendNumber+0x3e>

		}
		Local_u32Check/=10;
	}

}
    103a:	2e 96       	adiw	r28, 0x0e	; 14
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <CLCD_voidGotoXY>:

void CLCD_voidGotoXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <CLCD_voidGotoXY+0x6>
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	8a 83       	std	Y+2, r24	; 0x02
    105a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRAMAddress;
	if(Copy_u8YPos == 0)
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	88 23       	and	r24, r24
    1060:	19 f4       	brne	.+6      	; 0x1068 <CLCD_voidGotoXY+0x1c>
	{
		/*Check if in first line*/
		Local_u8DDRAMAddress = Copy_u8XPos;
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	06 c0       	rjmp	.+12     	; 0x1074 <CLCD_voidGotoXY+0x28>
	}
	else if(Copy_u8YPos == 1)
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	19 f4       	brne	.+6      	; 0x1074 <CLCD_voidGotoXY+0x28>
	{
		/*Check if in second line*/
		Local_u8DDRAMAddress = 0x40+Copy_u8XPos;
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	80 5c       	subi	r24, 0xC0	; 192
    1072:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Set bit number 7 for setDDRAM Address then send the command*/
	CLCD_voidSendCommand(Local_u8DDRAMAddress+128);
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	80 58       	subi	r24, 0x80	; 128
    1078:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	27 97       	sbiw	r28, 0x07	; 7
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	9c 83       	std	Y+4, r25	; 0x04
    109e:	8b 83       	std	Y+3, r24	; 0x03
    10a0:	6d 83       	std	Y+5, r22	; 0x05
    10a2:	4e 83       	std	Y+6, r20	; 0x06
    10a4:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress,Local_u8Counter;

	/*1- Calculate CGRAM address knowing that every pattern consumes 8 bytes*/
	Local_u8CGRAMAddress = Copy_u8PatternNumber*8;
    10a6:	8d 81       	ldd	r24, Y+5	; 0x05
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	8a 83       	std	Y+2, r24	; 0x02

	/*2- Send setCGRAM address command to LCD with setting bit_6 and clearing bit_7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	80 5c       	subi	r24, 0xC0	; 192
    10be:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*3- Write pattern into CGRAM*/
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    10c2:	19 82       	std	Y+1, r1	; 0x01
    10c4:	0e c0       	rjmp	.+28     	; 0x10e2 <CLCD_voidWriteSpecialCharacter+0x5a>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	9c 81       	ldd	r25, Y+4	; 0x04
    10d0:	fc 01       	movw	r30, r24
    10d2:	e2 0f       	add	r30, r18
    10d4:	f3 1f       	adc	r31, r19
    10d6:	80 81       	ld	r24, Z
    10d8:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>

	/*2- Send setCGRAM address command to LCD with setting bit_6 and clearing bit_7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*3- Write pattern into CGRAM*/
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	8f 5f       	subi	r24, 0xFF	; 255
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	88 30       	cpi	r24, 0x08	; 8
    10e6:	78 f3       	brcs	.-34     	; 0x10c6 <CLCD_voidWriteSpecialCharacter+0x3e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}

	/*4- Back to DDRAM to display the special pattern*/
	CLCD_voidGotoXY(Copy_u8XPos, Copy_u8YPos);
    10e8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ea:	6f 81       	ldd	r22, Y+7	; 0x07
    10ec:	0e 94 26 08 	call	0x104c	; 0x104c <CLCD_voidGotoXY>

	/*5- Display the special pattern*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
}
    10f6:	27 96       	adiw	r28, 0x07	; 7
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <DIO_u8SetPinValue>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_register.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	28 97       	sbiw	r28, 0x08	; 8
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	8a 83       	std	Y+2, r24	; 0x02
    111e:	6b 83       	std	Y+3, r22	; 0x03
    1120:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = OK;
    1122:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	88 30       	cpi	r24, 0x08	; 8
    1128:	08 f0       	brcs	.+2      	; 0x112c <DIO_u8SetPinValue+0x24>
    112a:	f4 c0       	rjmp	.+488    	; 0x1314 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	88 23       	and	r24, r24
    1130:	09 f0       	breq	.+2      	; 0x1134 <DIO_u8SetPinValue+0x2c>
    1132:	77 c0       	rjmp	.+238    	; 0x1222 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	38 87       	std	Y+8, r19	; 0x08
    113c:	2f 83       	std	Y+7, r18	; 0x07
    113e:	8f 81       	ldd	r24, Y+7	; 0x07
    1140:	98 85       	ldd	r25, Y+8	; 0x08
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	91 05       	cpc	r25, r1
    1146:	59 f1       	breq	.+86     	; 0x119e <DIO_u8SetPinValue+0x96>
    1148:	2f 81       	ldd	r18, Y+7	; 0x07
    114a:	38 85       	ldd	r19, Y+8	; 0x08
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	2c f4       	brge	.+10     	; 0x115c <DIO_u8SetPinValue+0x54>
    1152:	8f 81       	ldd	r24, Y+7	; 0x07
    1154:	98 85       	ldd	r25, Y+8	; 0x08
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	69 f0       	breq	.+26     	; 0x1174 <DIO_u8SetPinValue+0x6c>
    115a:	60 c0       	rjmp	.+192    	; 0x121c <DIO_u8SetPinValue+0x114>
    115c:	2f 81       	ldd	r18, Y+7	; 0x07
    115e:	38 85       	ldd	r19, Y+8	; 0x08
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	89 f1       	breq	.+98     	; 0x11c8 <DIO_u8SetPinValue+0xc0>
    1166:	8f 81       	ldd	r24, Y+7	; 0x07
    1168:	98 85       	ldd	r25, Y+8	; 0x08
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	91 05       	cpc	r25, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <DIO_u8SetPinValue+0x6a>
    1170:	40 c0       	rjmp	.+128    	; 0x11f2 <DIO_u8SetPinValue+0xea>
    1172:	54 c0       	rjmp	.+168    	; 0x121c <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1174:	ab e3       	ldi	r26, 0x3B	; 59
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	eb e3       	ldi	r30, 0x3B	; 59
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <DIO_u8SetPinValue+0x8a>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <DIO_u8SetPinValue+0x86>
    1196:	80 95       	com	r24
    1198:	84 23       	and	r24, r20
    119a:	8c 93       	st	X, r24
    119c:	bd c0       	rjmp	.+378    	; 0x1318 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    119e:	a8 e3       	ldi	r26, 0x38	; 56
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e8 e3       	ldi	r30, 0x38	; 56
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <DIO_u8SetPinValue+0xb4>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <DIO_u8SetPinValue+0xb0>
    11c0:	80 95       	com	r24
    11c2:	84 23       	and	r24, r20
    11c4:	8c 93       	st	X, r24
    11c6:	a8 c0       	rjmp	.+336    	; 0x1318 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    11c8:	a5 e3       	ldi	r26, 0x35	; 53
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e5 e3       	ldi	r30, 0x35	; 53
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_u8SetPinValue+0xde>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <DIO_u8SetPinValue+0xda>
    11ea:	80 95       	com	r24
    11ec:	84 23       	and	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	93 c0       	rjmp	.+294    	; 0x1318 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    11f2:	a2 e3       	ldi	r26, 0x32	; 50
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e2 e3       	ldi	r30, 0x32	; 50
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_u8SetPinValue+0x108>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <DIO_u8SetPinValue+0x104>
    1214:	80 95       	com	r24
    1216:	84 23       	and	r24, r20
    1218:	8c 93       	st	X, r24
    121a:	7e c0       	rjmp	.+252    	; 0x1318 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=NOK;             break;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	7b c0       	rjmp	.+246    	; 0x1318 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	09 f0       	breq	.+2      	; 0x122a <DIO_u8SetPinValue+0x122>
    1228:	72 c0       	rjmp	.+228    	; 0x130e <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	3e 83       	std	Y+6, r19	; 0x06
    1232:	2d 83       	std	Y+5, r18	; 0x05
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	49 f1       	breq	.+82     	; 0x1290 <DIO_u8SetPinValue+0x188>
    123e:	2d 81       	ldd	r18, Y+5	; 0x05
    1240:	3e 81       	ldd	r19, Y+6	; 0x06
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	2c f4       	brge	.+10     	; 0x1252 <DIO_u8SetPinValue+0x14a>
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	9e 81       	ldd	r25, Y+6	; 0x06
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	61 f0       	breq	.+24     	; 0x1268 <DIO_u8SetPinValue+0x160>
    1250:	5b c0       	rjmp	.+182    	; 0x1308 <DIO_u8SetPinValue+0x200>
    1252:	2d 81       	ldd	r18, Y+5	; 0x05
    1254:	3e 81       	ldd	r19, Y+6	; 0x06
    1256:	22 30       	cpi	r18, 0x02	; 2
    1258:	31 05       	cpc	r19, r1
    125a:	71 f1       	breq	.+92     	; 0x12b8 <DIO_u8SetPinValue+0x1b0>
    125c:	8d 81       	ldd	r24, Y+5	; 0x05
    125e:	9e 81       	ldd	r25, Y+6	; 0x06
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	91 05       	cpc	r25, r1
    1264:	e9 f1       	breq	.+122    	; 0x12e0 <DIO_u8SetPinValue+0x1d8>
    1266:	50 c0       	rjmp	.+160    	; 0x1308 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1268:	ab e3       	ldi	r26, 0x3B	; 59
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	eb e3       	ldi	r30, 0x3B	; 59
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_u8SetPinValue+0x17e>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_u8SetPinValue+0x17a>
    128a:	84 2b       	or	r24, r20
    128c:	8c 93       	st	X, r24
    128e:	44 c0       	rjmp	.+136    	; 0x1318 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1290:	a8 e3       	ldi	r26, 0x38	; 56
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e8 e3       	ldi	r30, 0x38	; 56
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_u8SetPinValue+0x1a6>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_u8SetPinValue+0x1a2>
    12b2:	84 2b       	or	r24, r20
    12b4:	8c 93       	st	X, r24
    12b6:	30 c0       	rjmp	.+96     	; 0x1318 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    12b8:	a5 e3       	ldi	r26, 0x35	; 53
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e5 e3       	ldi	r30, 0x35	; 53
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_u8SetPinValue+0x1ce>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <DIO_u8SetPinValue+0x1ca>
    12da:	84 2b       	or	r24, r20
    12dc:	8c 93       	st	X, r24
    12de:	1c c0       	rjmp	.+56     	; 0x1318 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    12e0:	a2 e3       	ldi	r26, 0x32	; 50
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e2 e3       	ldi	r30, 0x32	; 50
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <DIO_u8SetPinValue+0x1f6>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <DIO_u8SetPinValue+0x1f2>
    1302:	84 2b       	or	r24, r20
    1304:	8c 93       	st	X, r24
    1306:	08 c0       	rjmp	.+16     	; 0x1318 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=NOK;             break;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	05 c0       	rjmp	.+10     	; 0x1318 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	89 83       	std	Y+1, r24	; 0x01
    }
	return Local_u8ErrorState;
    1318:	89 81       	ldd	r24, Y+1	; 0x01
}
    131a:	28 96       	adiw	r28, 0x08	; 8
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	00 d0       	rcall	.+0      	; 0x1332 <DIO_u8SetPortValue+0x6>
    1332:	00 d0       	rcall	.+0      	; 0x1334 <DIO_u8SetPortValue+0x8>
    1334:	0f 92       	push	r0
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	8a 83       	std	Y+2, r24	; 0x02
    133c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    133e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	3d 83       	std	Y+5, r19	; 0x05
    1348:	2c 83       	std	Y+4, r18	; 0x04
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	91 05       	cpc	r25, r1
    1352:	d1 f0       	breq	.+52     	; 0x1388 <DIO_u8SetPortValue+0x5c>
    1354:	2c 81       	ldd	r18, Y+4	; 0x04
    1356:	3d 81       	ldd	r19, Y+5	; 0x05
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	2c f4       	brge	.+10     	; 0x1368 <DIO_u8SetPortValue+0x3c>
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	61 f0       	breq	.+24     	; 0x137e <DIO_u8SetPortValue+0x52>
    1366:	1f c0       	rjmp	.+62     	; 0x13a6 <DIO_u8SetPortValue+0x7a>
    1368:	2c 81       	ldd	r18, Y+4	; 0x04
    136a:	3d 81       	ldd	r19, Y+5	; 0x05
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	81 f0       	breq	.+32     	; 0x1392 <DIO_u8SetPortValue+0x66>
    1372:	8c 81       	ldd	r24, Y+4	; 0x04
    1374:	9d 81       	ldd	r25, Y+5	; 0x05
    1376:	83 30       	cpi	r24, 0x03	; 3
    1378:	91 05       	cpc	r25, r1
    137a:	81 f0       	breq	.+32     	; 0x139c <DIO_u8SetPortValue+0x70>
    137c:	14 c0       	rjmp	.+40     	; 0x13a6 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    137e:	eb e3       	ldi	r30, 0x3B	; 59
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	80 83       	st	Z, r24
    1386:	11 c0       	rjmp	.+34     	; 0x13aa <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    1388:	e8 e3       	ldi	r30, 0x38	; 56
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	80 83       	st	Z, r24
    1390:	0c c0       	rjmp	.+24     	; 0x13aa <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    1392:	e5 e3       	ldi	r30, 0x35	; 53
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	80 83       	st	Z, r24
    139a:	07 c0       	rjmp	.+14     	; 0x13aa <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    139c:	e2 e3       	ldi	r30, 0x32	; 50
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	80 83       	st	Z, r24
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=NOK;      break;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	27 97       	sbiw	r28, 0x07	; 7
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	8a 83       	std	Y+2, r24	; 0x02
    13d2:	6b 83       	std	Y+3, r22	; 0x03
    13d4:	5d 83       	std	Y+5, r21	; 0x05
    13d6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = OK;
    13d8:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL)  && (Copy_u8Pin<= DIO_u8PIN7))
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <DIO_u8GetPinValue+0x28>
    13e2:	78 c0       	rjmp	.+240    	; 0x14d4 <DIO_u8GetPinValue+0x118>
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	88 30       	cpi	r24, 0x08	; 8
    13e8:	08 f0       	brcs	.+2      	; 0x13ec <DIO_u8GetPinValue+0x30>
    13ea:	74 c0       	rjmp	.+232    	; 0x14d4 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	3f 83       	std	Y+7, r19	; 0x07
    13f4:	2e 83       	std	Y+6, r18	; 0x06
    13f6:	4e 81       	ldd	r20, Y+6	; 0x06
    13f8:	5f 81       	ldd	r21, Y+7	; 0x07
    13fa:	41 30       	cpi	r20, 0x01	; 1
    13fc:	51 05       	cpc	r21, r1
    13fe:	59 f1       	breq	.+86     	; 0x1456 <DIO_u8GetPinValue+0x9a>
    1400:	8e 81       	ldd	r24, Y+6	; 0x06
    1402:	9f 81       	ldd	r25, Y+7	; 0x07
    1404:	82 30       	cpi	r24, 0x02	; 2
    1406:	91 05       	cpc	r25, r1
    1408:	34 f4       	brge	.+12     	; 0x1416 <DIO_u8GetPinValue+0x5a>
    140a:	2e 81       	ldd	r18, Y+6	; 0x06
    140c:	3f 81       	ldd	r19, Y+7	; 0x07
    140e:	21 15       	cp	r18, r1
    1410:	31 05       	cpc	r19, r1
    1412:	69 f0       	breq	.+26     	; 0x142e <DIO_u8GetPinValue+0x72>
    1414:	5c c0       	rjmp	.+184    	; 0x14ce <DIO_u8GetPinValue+0x112>
    1416:	4e 81       	ldd	r20, Y+6	; 0x06
    1418:	5f 81       	ldd	r21, Y+7	; 0x07
    141a:	42 30       	cpi	r20, 0x02	; 2
    141c:	51 05       	cpc	r21, r1
    141e:	79 f1       	breq	.+94     	; 0x147e <DIO_u8GetPinValue+0xc2>
    1420:	8e 81       	ldd	r24, Y+6	; 0x06
    1422:	9f 81       	ldd	r25, Y+7	; 0x07
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	91 05       	cpc	r25, r1
    1428:	09 f4       	brne	.+2      	; 0x142c <DIO_u8GetPinValue+0x70>
    142a:	3d c0       	rjmp	.+122    	; 0x14a6 <DIO_u8GetPinValue+0xea>
    142c:	50 c0       	rjmp	.+160    	; 0x14ce <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA: *Copy_pu8Value= GET_BIT(PINA,Copy_u8Pin); break;
    142e:	e9 e3       	ldi	r30, 0x39	; 57
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	88 2f       	mov	r24, r24
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a9 01       	movw	r20, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_u8GetPinValue+0x8a>
    1442:	55 95       	asr	r21
    1444:	47 95       	ror	r20
    1446:	8a 95       	dec	r24
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_u8GetPinValue+0x86>
    144a:	ca 01       	movw	r24, r20
    144c:	81 70       	andi	r24, 0x01	; 1
    144e:	ec 81       	ldd	r30, Y+4	; 0x04
    1450:	fd 81       	ldd	r31, Y+5	; 0x05
    1452:	80 83       	st	Z, r24
    1454:	41 c0       	rjmp	.+130    	; 0x14d8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value= GET_BIT(PINB,Copy_u8Pin); break;
    1456:	e6 e3       	ldi	r30, 0x36	; 54
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a9 01       	movw	r20, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_u8GetPinValue+0xb2>
    146a:	55 95       	asr	r21
    146c:	47 95       	ror	r20
    146e:	8a 95       	dec	r24
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_u8GetPinValue+0xae>
    1472:	ca 01       	movw	r24, r20
    1474:	81 70       	andi	r24, 0x01	; 1
    1476:	ec 81       	ldd	r30, Y+4	; 0x04
    1478:	fd 81       	ldd	r31, Y+5	; 0x05
    147a:	80 83       	st	Z, r24
    147c:	2d c0       	rjmp	.+90     	; 0x14d8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value= GET_BIT(PINC,Copy_u8Pin); break;
    147e:	e3 e3       	ldi	r30, 0x33	; 51
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	a9 01       	movw	r20, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <DIO_u8GetPinValue+0xda>
    1492:	55 95       	asr	r21
    1494:	47 95       	ror	r20
    1496:	8a 95       	dec	r24
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <DIO_u8GetPinValue+0xd6>
    149a:	ca 01       	movw	r24, r20
    149c:	81 70       	andi	r24, 0x01	; 1
    149e:	ec 81       	ldd	r30, Y+4	; 0x04
    14a0:	fd 81       	ldd	r31, Y+5	; 0x05
    14a2:	80 83       	st	Z, r24
    14a4:	19 c0       	rjmp	.+50     	; 0x14d8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value= GET_BIT(PIND,Copy_u8Pin); break;
    14a6:	e0 e3       	ldi	r30, 0x30	; 48
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a9 01       	movw	r20, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <DIO_u8GetPinValue+0x102>
    14ba:	55 95       	asr	r21
    14bc:	47 95       	ror	r20
    14be:	8a 95       	dec	r24
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <DIO_u8GetPinValue+0xfe>
    14c2:	ca 01       	movw	r24, r20
    14c4:	81 70       	andi	r24, 0x01	; 1
    14c6:	ec 81       	ldd	r30, Y+4	; 0x04
    14c8:	fd 81       	ldd	r31, Y+5	; 0x05
    14ca:	80 83       	st	Z, r24
    14cc:	05 c0       	rjmp	.+10     	; 0x14d8 <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=NOK; 							break;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14da:	27 96       	adiw	r28, 0x07	; 7
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <DIO_u8TogglePinValue+0x6>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <DIO_u8TogglePinValue+0x8>
    14f4:	0f 92       	push	r0
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	8a 83       	std	Y+2, r24	; 0x02
    14fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= OK;
    14fe:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 30       	cpi	r24, 0x08	; 8
    1504:	08 f0       	brcs	.+2      	; 0x1508 <DIO_u8TogglePinValue+0x1c>
    1506:	71 c0       	rjmp	.+226    	; 0x15ea <DIO_u8TogglePinValue+0xfe>
	{
			switch(Copy_u8Port)
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	3d 83       	std	Y+5, r19	; 0x05
    1510:	2c 83       	std	Y+4, r18	; 0x04
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
    1514:	9d 81       	ldd	r25, Y+5	; 0x05
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	91 05       	cpc	r25, r1
    151a:	49 f1       	breq	.+82     	; 0x156e <DIO_u8TogglePinValue+0x82>
    151c:	2c 81       	ldd	r18, Y+4	; 0x04
    151e:	3d 81       	ldd	r19, Y+5	; 0x05
    1520:	22 30       	cpi	r18, 0x02	; 2
    1522:	31 05       	cpc	r19, r1
    1524:	2c f4       	brge	.+10     	; 0x1530 <DIO_u8TogglePinValue+0x44>
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	9d 81       	ldd	r25, Y+5	; 0x05
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	61 f0       	breq	.+24     	; 0x1546 <DIO_u8TogglePinValue+0x5a>
    152e:	5b c0       	rjmp	.+182    	; 0x15e6 <DIO_u8TogglePinValue+0xfa>
    1530:	2c 81       	ldd	r18, Y+4	; 0x04
    1532:	3d 81       	ldd	r19, Y+5	; 0x05
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	71 f1       	breq	.+92     	; 0x1596 <DIO_u8TogglePinValue+0xaa>
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	9d 81       	ldd	r25, Y+5	; 0x05
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	91 05       	cpc	r25, r1
    1542:	e9 f1       	breq	.+122    	; 0x15be <DIO_u8TogglePinValue+0xd2>
    1544:	50 c0       	rjmp	.+160    	; 0x15e6 <DIO_u8TogglePinValue+0xfa>
			{
			case DIO_u8PORTA: TOGGLE_BIT(PORTA,Copy_u8Pin); break;
    1546:	ab e3       	ldi	r26, 0x3B	; 59
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	eb e3       	ldi	r30, 0x3B	; 59
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_u8TogglePinValue+0x78>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_u8TogglePinValue+0x74>
    1568:	84 27       	eor	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	3e c0       	rjmp	.+124    	; 0x15ea <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTB: TOGGLE_BIT(PORTB,Copy_u8Pin); break;
    156e:	a8 e3       	ldi	r26, 0x38	; 56
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e8 e3       	ldi	r30, 0x38	; 56
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <DIO_u8TogglePinValue+0xa0>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <DIO_u8TogglePinValue+0x9c>
    1590:	84 27       	eor	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	2a c0       	rjmp	.+84     	; 0x15ea <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTC: TOGGLE_BIT(PORTC,Copy_u8Pin); break;
    1596:	a5 e3       	ldi	r26, 0x35	; 53
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e5 e3       	ldi	r30, 0x35	; 53
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	48 2f       	mov	r20, r24
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_u8TogglePinValue+0xc8>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_u8TogglePinValue+0xc4>
    15b8:	84 27       	eor	r24, r20
    15ba:	8c 93       	st	X, r24
    15bc:	16 c0       	rjmp	.+44     	; 0x15ea <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTD: TOGGLE_BIT(PORTD,Copy_u8Pin); break;
    15be:	a2 e3       	ldi	r26, 0x32	; 50
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e2 e3       	ldi	r30, 0x32	; 50
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	48 2f       	mov	r20, r24
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 2e       	mov	r0, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <DIO_u8TogglePinValue+0xf0>
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	0a 94       	dec	r0
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <DIO_u8TogglePinValue+0xec>
    15e0:	84 27       	eor	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_u8TogglePinValue+0xfe>
			default: Local_u8ErrorState=NOK; 		    	break;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	89 83       	std	Y+1, r24	; 0x01
			}
		}

	return Local_u8ErrorState;
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <EXTI_voidINT0Init>:
/*Define Global array of 3 pointers to functions to carry ISR application addresses*/
static void (*EXTI_pvINTCallBackFunc[3])(void)={NULL};


void EXTI_voidINT0Init()
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_INT0_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);

#elif EXTI_INT0_SENSE == FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
    1604:	a5 e5       	ldi	r26, 0x55	; 85
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e5 e5       	ldi	r30, 0x55	; 85
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8e 7f       	andi	r24, 0xFE	; 254
    1610:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    1612:	a5 e5       	ldi	r26, 0x55	; 85
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e5 e5       	ldi	r30, 0x55	; 85
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	82 60       	ori	r24, 0x02	; 2
    161e:	8c 93       	st	X, r24
#error "WRONG EXTI_INT0_SENCE configuration"
#endif

	// Enable PIE INT0 initial state
#if EXTI_INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
    1620:	ab e5       	ldi	r26, 0x5B	; 91
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	eb e5       	ldi	r30, 0x5B	; 91
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	80 64       	ori	r24, 0x40	; 64
    162c:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT0);

#else
#error "Wrong EXTI_INT0_INITIAL_STATE configuration option"
#endif
}
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <EXTI_voidINT1Init>:

void EXTI_voidINT1Init()
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_INT1_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);

#elif EXTI_INT1_SENSE == FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
    163c:	a5 e5       	ldi	r26, 0x55	; 85
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e5 e5       	ldi	r30, 0x55	; 85
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	8b 7f       	andi	r24, 0xFB	; 251
    1648:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    164a:	a5 e5       	ldi	r26, 0x55	; 85
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e5 e5       	ldi	r30, 0x55	; 85
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	88 60       	ori	r24, 0x08	; 8
    1656:	8c 93       	st	X, r24
#error "WRONG EXTI_INT1_SENSE configuration"
#endif

	// Enable PIE INT1 initial state
#if EXTI_INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
    1658:	ab e5       	ldi	r26, 0x5B	; 91
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	eb e5       	ldi	r30, 0x5B	; 91
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	80 68       	ori	r24, 0x80	; 128
    1664:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT1);

#else
#error "Wrong EXTI_INT1_INITIAL_STATE configuration option"
#endif
}
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <EXTI_u8SetSenseControl>:

u8 EXTI_u8SetSenseControl(u8 Copy_u8Sense , u8 Copy_u8IntNumber)
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	2b 97       	sbiw	r28, 0x0b	; 11
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	8a 83       	std	Y+2, r24	; 0x02
    1682:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =OK;
    1684:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNumber){
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	3b 87       	std	Y+11, r19	; 0x0b
    168e:	2a 87       	std	Y+10, r18	; 0x0a
    1690:	8a 85       	ldd	r24, Y+10	; 0x0a
    1692:	9b 85       	ldd	r25, Y+11	; 0x0b
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	91 05       	cpc	r25, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <EXTI_u8SetSenseControl+0x30>
    169a:	6a c0       	rjmp	.+212    	; 0x1770 <EXTI_u8SetSenseControl+0x104>
    169c:	2a 85       	ldd	r18, Y+10	; 0x0a
    169e:	3b 85       	ldd	r19, Y+11	; 0x0b
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	31 05       	cpc	r19, r1
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <EXTI_u8SetSenseControl+0x3c>
    16a6:	c3 c0       	rjmp	.+390    	; 0x182e <EXTI_u8SetSenseControl+0x1c2>
    16a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    16aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <EXTI_u8SetSenseControl+0x46>
    16b0:	ee c0       	rjmp	.+476    	; 0x188e <EXTI_u8SetSenseControl+0x222>
	case EXTI_INT0:
		switch (Copy_u8Sense)
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	39 87       	std	Y+9, r19	; 0x09
    16ba:	28 87       	std	Y+8, r18	; 0x08
    16bc:	88 85       	ldd	r24, Y+8	; 0x08
    16be:	99 85       	ldd	r25, Y+9	; 0x09
    16c0:	82 30       	cpi	r24, 0x02	; 2
    16c2:	91 05       	cpc	r25, r1
    16c4:	29 f1       	breq	.+74     	; 0x1710 <EXTI_u8SetSenseControl+0xa4>
    16c6:	28 85       	ldd	r18, Y+8	; 0x08
    16c8:	39 85       	ldd	r19, Y+9	; 0x09
    16ca:	23 30       	cpi	r18, 0x03	; 3
    16cc:	31 05       	cpc	r19, r1
    16ce:	34 f4       	brge	.+12     	; 0x16dc <EXTI_u8SetSenseControl+0x70>
    16d0:	88 85       	ldd	r24, Y+8	; 0x08
    16d2:	99 85       	ldd	r25, Y+9	; 0x09
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	91 05       	cpc	r25, r1
    16d8:	61 f0       	breq	.+24     	; 0x16f2 <EXTI_u8SetSenseControl+0x86>
    16da:	47 c0       	rjmp	.+142    	; 0x176a <EXTI_u8SetSenseControl+0xfe>
    16dc:	28 85       	ldd	r18, Y+8	; 0x08
    16de:	39 85       	ldd	r19, Y+9	; 0x09
    16e0:	23 30       	cpi	r18, 0x03	; 3
    16e2:	31 05       	cpc	r19, r1
    16e4:	21 f1       	breq	.+72     	; 0x172e <EXTI_u8SetSenseControl+0xc2>
    16e6:	88 85       	ldd	r24, Y+8	; 0x08
    16e8:	99 85       	ldd	r25, Y+9	; 0x09
    16ea:	84 30       	cpi	r24, 0x04	; 4
    16ec:	91 05       	cpc	r25, r1
    16ee:	71 f1       	breq	.+92     	; 0x174c <EXTI_u8SetSenseControl+0xe0>
    16f0:	3c c0       	rjmp	.+120    	; 0x176a <EXTI_u8SetSenseControl+0xfe>
		{
		case LOW_LEVEL:		CLR_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    16f2:	a5 e5       	ldi	r26, 0x55	; 85
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e5 e5       	ldi	r30, 0x55	; 85
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	8e 7f       	andi	r24, 0xFE	; 254
    16fe:	8c 93       	st	X, r24
    1700:	a5 e5       	ldi	r26, 0x55	; 85
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e5 e5       	ldi	r30, 0x55	; 85
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	8d 7f       	andi	r24, 0xFD	; 253
    170c:	8c 93       	st	X, r24
    170e:	c1 c0       	rjmp	.+386    	; 0x1892 <EXTI_u8SetSenseControl+0x226>
		case ON_CHANGE:		SET_BIT(MCUCR,MCUCR_ISC00);	CLR_BIT(MCUCR,MCUCR_ISC01); break;
    1710:	a5 e5       	ldi	r26, 0x55	; 85
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e5 e5       	ldi	r30, 0x55	; 85
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	81 60       	ori	r24, 0x01	; 1
    171c:	8c 93       	st	X, r24
    171e:	a5 e5       	ldi	r26, 0x55	; 85
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e5 e5       	ldi	r30, 0x55	; 85
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8d 7f       	andi	r24, 0xFD	; 253
    172a:	8c 93       	st	X, r24
    172c:	b2 c0       	rjmp	.+356    	; 0x1892 <EXTI_u8SetSenseControl+0x226>
		case FALLING_EDGE:	CLR_BIT(MCUCR,MCUCR_ISC00);	SET_BIT(MCUCR,MCUCR_ISC01); break;
    172e:	a5 e5       	ldi	r26, 0x55	; 85
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e5 e5       	ldi	r30, 0x55	; 85
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	8e 7f       	andi	r24, 0xFE	; 254
    173a:	8c 93       	st	X, r24
    173c:	a5 e5       	ldi	r26, 0x55	; 85
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e5 e5       	ldi	r30, 0x55	; 85
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	82 60       	ori	r24, 0x02	; 2
    1748:	8c 93       	st	X, r24
    174a:	a3 c0       	rjmp	.+326    	; 0x1892 <EXTI_u8SetSenseControl+0x226>
		case RISING_EDGE: 	SET_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    174c:	a5 e5       	ldi	r26, 0x55	; 85
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e5 e5       	ldi	r30, 0x55	; 85
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	81 60       	ori	r24, 0x01	; 1
    1758:	8c 93       	st	X, r24
    175a:	a5 e5       	ldi	r26, 0x55	; 85
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e5 e5       	ldi	r30, 0x55	; 85
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	82 60       	ori	r24, 0x02	; 2
    1766:	8c 93       	st	X, r24
    1768:	94 c0       	rjmp	.+296    	; 0x1892 <EXTI_u8SetSenseControl+0x226>
		default :Local_u8ErrorState =NOK; break;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	91 c0       	rjmp	.+290    	; 0x1892 <EXTI_u8SetSenseControl+0x226>
		}
		break;
	case EXTI_INT1 :
		switch (Copy_u8Sense)
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	3f 83       	std	Y+7, r19	; 0x07
    1778:	2e 83       	std	Y+6, r18	; 0x06
    177a:	8e 81       	ldd	r24, Y+6	; 0x06
    177c:	9f 81       	ldd	r25, Y+7	; 0x07
    177e:	82 30       	cpi	r24, 0x02	; 2
    1780:	91 05       	cpc	r25, r1
    1782:	29 f1       	breq	.+74     	; 0x17ce <EXTI_u8SetSenseControl+0x162>
    1784:	2e 81       	ldd	r18, Y+6	; 0x06
    1786:	3f 81       	ldd	r19, Y+7	; 0x07
    1788:	23 30       	cpi	r18, 0x03	; 3
    178a:	31 05       	cpc	r19, r1
    178c:	34 f4       	brge	.+12     	; 0x179a <EXTI_u8SetSenseControl+0x12e>
    178e:	8e 81       	ldd	r24, Y+6	; 0x06
    1790:	9f 81       	ldd	r25, Y+7	; 0x07
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	91 05       	cpc	r25, r1
    1796:	61 f0       	breq	.+24     	; 0x17b0 <EXTI_u8SetSenseControl+0x144>
    1798:	47 c0       	rjmp	.+142    	; 0x1828 <EXTI_u8SetSenseControl+0x1bc>
    179a:	2e 81       	ldd	r18, Y+6	; 0x06
    179c:	3f 81       	ldd	r19, Y+7	; 0x07
    179e:	23 30       	cpi	r18, 0x03	; 3
    17a0:	31 05       	cpc	r19, r1
    17a2:	21 f1       	breq	.+72     	; 0x17ec <EXTI_u8SetSenseControl+0x180>
    17a4:	8e 81       	ldd	r24, Y+6	; 0x06
    17a6:	9f 81       	ldd	r25, Y+7	; 0x07
    17a8:	84 30       	cpi	r24, 0x04	; 4
    17aa:	91 05       	cpc	r25, r1
    17ac:	71 f1       	breq	.+92     	; 0x180a <EXTI_u8SetSenseControl+0x19e>
    17ae:	3c c0       	rjmp	.+120    	; 0x1828 <EXTI_u8SetSenseControl+0x1bc>
		{
		case LOW_LEVEL:		CLR_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
    17b0:	a5 e5       	ldi	r26, 0x55	; 85
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e5 e5       	ldi	r30, 0x55	; 85
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	8b 7f       	andi	r24, 0xFB	; 251
    17bc:	8c 93       	st	X, r24
    17be:	a5 e5       	ldi	r26, 0x55	; 85
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e5 e5       	ldi	r30, 0x55	; 85
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	87 7f       	andi	r24, 0xF7	; 247
    17ca:	8c 93       	st	X, r24
    17cc:	62 c0       	rjmp	.+196    	; 0x1892 <EXTI_u8SetSenseControl+0x226>
		case ON_CHANGE:		SET_BIT(MCUCR,MCUCR_ISC10);	CLR_BIT(MCUCR,MCUCR_ISC11); break;
    17ce:	a5 e5       	ldi	r26, 0x55	; 85
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e5 e5       	ldi	r30, 0x55	; 85
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	84 60       	ori	r24, 0x04	; 4
    17da:	8c 93       	st	X, r24
    17dc:	a5 e5       	ldi	r26, 0x55	; 85
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e5 e5       	ldi	r30, 0x55	; 85
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	87 7f       	andi	r24, 0xF7	; 247
    17e8:	8c 93       	st	X, r24
    17ea:	53 c0       	rjmp	.+166    	; 0x1892 <EXTI_u8SetSenseControl+0x226>
		case FALLING_EDGE: 	CLR_BIT(MCUCR,MCUCR_ISC10);	SET_BIT(MCUCR,MCUCR_ISC11); break;
    17ec:	a5 e5       	ldi	r26, 0x55	; 85
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e5 e5       	ldi	r30, 0x55	; 85
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	8b 7f       	andi	r24, 0xFB	; 251
    17f8:	8c 93       	st	X, r24
    17fa:	a5 e5       	ldi	r26, 0x55	; 85
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e5 e5       	ldi	r30, 0x55	; 85
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	88 60       	ori	r24, 0x08	; 8
    1806:	8c 93       	st	X, r24
    1808:	44 c0       	rjmp	.+136    	; 0x1892 <EXTI_u8SetSenseControl+0x226>
		case RISING_EDGE: 	SET_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
    180a:	a5 e5       	ldi	r26, 0x55	; 85
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e5 e5       	ldi	r30, 0x55	; 85
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	84 60       	ori	r24, 0x04	; 4
    1816:	8c 93       	st	X, r24
    1818:	a5 e5       	ldi	r26, 0x55	; 85
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e5 e5       	ldi	r30, 0x55	; 85
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	88 60       	ori	r24, 0x08	; 8
    1824:	8c 93       	st	X, r24
    1826:	35 c0       	rjmp	.+106    	; 0x1892 <EXTI_u8SetSenseControl+0x226>
		default :Local_u8ErrorState =NOK; break;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	32 c0       	rjmp	.+100    	; 0x1892 <EXTI_u8SetSenseControl+0x226>
		}
		break;
	case EXTI_INT2 :
		switch (Copy_u8Sense)
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	3d 83       	std	Y+5, r19	; 0x05
    1836:	2c 83       	std	Y+4, r18	; 0x04
    1838:	8c 81       	ldd	r24, Y+4	; 0x04
    183a:	9d 81       	ldd	r25, Y+5	; 0x05
    183c:	83 30       	cpi	r24, 0x03	; 3
    183e:	91 05       	cpc	r25, r1
    1840:	a1 f0       	breq	.+40     	; 0x186a <EXTI_u8SetSenseControl+0x1fe>
    1842:	2c 81       	ldd	r18, Y+4	; 0x04
    1844:	3d 81       	ldd	r19, Y+5	; 0x05
    1846:	24 30       	cpi	r18, 0x04	; 4
    1848:	31 05       	cpc	r19, r1
    184a:	f1 f4       	brne	.+60     	; 0x1888 <EXTI_u8SetSenseControl+0x21c>
		{
		case RISING_EDGE: 	SET_BIT(MCUCSR,MCUCSR_ISC2); SET_BIT(MCUCR,MCUCR_ISC11); break;
    184c:	a4 e5       	ldi	r26, 0x54	; 84
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e4 e5       	ldi	r30, 0x54	; 84
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	80 64       	ori	r24, 0x40	; 64
    1858:	8c 93       	st	X, r24
    185a:	a5 e5       	ldi	r26, 0x55	; 85
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e5 e5       	ldi	r30, 0x55	; 85
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	88 60       	ori	r24, 0x08	; 8
    1866:	8c 93       	st	X, r24
    1868:	14 c0       	rjmp	.+40     	; 0x1892 <EXTI_u8SetSenseControl+0x226>
		case FALLING_EDGE: 	CLR_BIT(MCUCSR,MCUCSR_ISC2); SET_BIT(MCUCR,MCUCR_ISC11); break;
    186a:	a4 e5       	ldi	r26, 0x54	; 84
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e4 e5       	ldi	r30, 0x54	; 84
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	8f 7b       	andi	r24, 0xBF	; 191
    1876:	8c 93       	st	X, r24
    1878:	a5 e5       	ldi	r26, 0x55	; 85
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e5 e5       	ldi	r30, 0x55	; 85
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	88 60       	ori	r24, 0x08	; 8
    1884:	8c 93       	st	X, r24
    1886:	05 c0       	rjmp	.+10     	; 0x1892 <EXTI_u8SetSenseControl+0x226>
		default :Local_u8ErrorState =NOK;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <EXTI_u8SetSenseControl+0x226>
		}
		break;
		default : Local_u8ErrorState = NOK; break;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
    1892:	89 81       	ldd	r24, Y+1	; 0x01
}
    1894:	2b 96       	adiw	r28, 0x0b	; 11
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <EXTI_u8INT0SetCallBack>:

u8 EXTI_u8INT0SetCallBack(void (*Copy_pvCallBackFunc)(void), u8 Copy_u8IntNumber)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <EXTI_u8INT0SetCallBack+0x6>
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <EXTI_u8INT0SetCallBack+0x8>
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	9b 83       	std	Y+3, r25	; 0x03
    18b4:	8a 83       	std	Y+2, r24	; 0x02
    18b6:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    18b8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	9b 81       	ldd	r25, Y+3	; 0x03
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	69 f0       	breq	.+26     	; 0x18dc <EXTI_u8INT0SetCallBack+0x36>
	{
		EXTI_pvINTCallBackFunc[Copy_u8IntNumber]= Copy_pvCallBackFunc;
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	fc 01       	movw	r30, r24
    18ce:	ea 51       	subi	r30, 0x1A	; 26
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	9b 81       	ldd	r25, Y+3	; 0x03
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	80 83       	st	Z, r24
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <EXTI_u8INT0SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
    18dc:	82 e0       	ldi	r24, 0x02	; 2
    18de:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <__vector_1>:

/*ISR of INT0*/
void  __vector_1 (void)	__attribute__((signal));
void  __vector_1 (void)
{
    18f0:	1f 92       	push	r1
    18f2:	0f 92       	push	r0
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	0f 92       	push	r0
    18f8:	11 24       	eor	r1, r1
    18fa:	2f 93       	push	r18
    18fc:	3f 93       	push	r19
    18fe:	4f 93       	push	r20
    1900:	5f 93       	push	r21
    1902:	6f 93       	push	r22
    1904:	7f 93       	push	r23
    1906:	8f 93       	push	r24
    1908:	9f 93       	push	r25
    190a:	af 93       	push	r26
    190c:	bf 93       	push	r27
    190e:	ef 93       	push	r30
    1910:	ff 93       	push	r31
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINTCallBackFunc[EXTI_INT0] != NULL)
    191a:	80 91 e6 00 	lds	r24, 0x00E6
    191e:	90 91 e7 00 	lds	r25, 0x00E7
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	29 f0       	breq	.+10     	; 0x1930 <__vector_1+0x40>
	{
		EXTI_pvINTCallBackFunc[EXTI_INT0]();
    1926:	e0 91 e6 00 	lds	r30, 0x00E6
    192a:	f0 91 e7 00 	lds	r31, 0x00E7
    192e:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	ff 91       	pop	r31
    1936:	ef 91       	pop	r30
    1938:	bf 91       	pop	r27
    193a:	af 91       	pop	r26
    193c:	9f 91       	pop	r25
    193e:	8f 91       	pop	r24
    1940:	7f 91       	pop	r23
    1942:	6f 91       	pop	r22
    1944:	5f 91       	pop	r21
    1946:	4f 91       	pop	r20
    1948:	3f 91       	pop	r19
    194a:	2f 91       	pop	r18
    194c:	0f 90       	pop	r0
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	0f 90       	pop	r0
    1952:	1f 90       	pop	r1
    1954:	18 95       	reti

00001956 <__vector_2>:

/*ISR of INT1*/
void  __vector_2 (void)	__attribute__((signal));
void  __vector_2 (void)
{
    1956:	1f 92       	push	r1
    1958:	0f 92       	push	r0
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	0f 92       	push	r0
    195e:	11 24       	eor	r1, r1
    1960:	2f 93       	push	r18
    1962:	3f 93       	push	r19
    1964:	4f 93       	push	r20
    1966:	5f 93       	push	r21
    1968:	6f 93       	push	r22
    196a:	7f 93       	push	r23
    196c:	8f 93       	push	r24
    196e:	9f 93       	push	r25
    1970:	af 93       	push	r26
    1972:	bf 93       	push	r27
    1974:	ef 93       	push	r30
    1976:	ff 93       	push	r31
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINTCallBackFunc[EXTI_INT1] != NULL)
    1980:	80 91 e8 00 	lds	r24, 0x00E8
    1984:	90 91 e9 00 	lds	r25, 0x00E9
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	29 f0       	breq	.+10     	; 0x1996 <__vector_2+0x40>
	{
		EXTI_pvINTCallBackFunc[EXTI_INT1]();
    198c:	e0 91 e8 00 	lds	r30, 0x00E8
    1990:	f0 91 e9 00 	lds	r31, 0x00E9
    1994:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	ff 91       	pop	r31
    199c:	ef 91       	pop	r30
    199e:	bf 91       	pop	r27
    19a0:	af 91       	pop	r26
    19a2:	9f 91       	pop	r25
    19a4:	8f 91       	pop	r24
    19a6:	7f 91       	pop	r23
    19a8:	6f 91       	pop	r22
    19aa:	5f 91       	pop	r21
    19ac:	4f 91       	pop	r20
    19ae:	3f 91       	pop	r19
    19b0:	2f 91       	pop	r18
    19b2:	0f 90       	pop	r0
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	0f 90       	pop	r0
    19b8:	1f 90       	pop	r1
    19ba:	18 95       	reti

000019bc <__vector_3>:

/*ISR of INT2*/
void  __vector_3 (void)	__attribute__((signal));
void  __vector_3 (void)
{
    19bc:	1f 92       	push	r1
    19be:	0f 92       	push	r0
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	0f 92       	push	r0
    19c4:	11 24       	eor	r1, r1
    19c6:	2f 93       	push	r18
    19c8:	3f 93       	push	r19
    19ca:	4f 93       	push	r20
    19cc:	5f 93       	push	r21
    19ce:	6f 93       	push	r22
    19d0:	7f 93       	push	r23
    19d2:	8f 93       	push	r24
    19d4:	9f 93       	push	r25
    19d6:	af 93       	push	r26
    19d8:	bf 93       	push	r27
    19da:	ef 93       	push	r30
    19dc:	ff 93       	push	r31
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINTCallBackFunc[EXTI_INT2] != NULL)
    19e6:	80 91 ea 00 	lds	r24, 0x00EA
    19ea:	90 91 eb 00 	lds	r25, 0x00EB
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	29 f0       	breq	.+10     	; 0x19fc <__vector_3+0x40>
	{
		EXTI_pvINTCallBackFunc[EXTI_INT2]();
    19f2:	e0 91 ea 00 	lds	r30, 0x00EA
    19f6:	f0 91 eb 00 	lds	r31, 0x00EB
    19fa:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	ff 91       	pop	r31
    1a02:	ef 91       	pop	r30
    1a04:	bf 91       	pop	r27
    1a06:	af 91       	pop	r26
    1a08:	9f 91       	pop	r25
    1a0a:	8f 91       	pop	r24
    1a0c:	7f 91       	pop	r23
    1a0e:	6f 91       	pop	r22
    1a10:	5f 91       	pop	r21
    1a12:	4f 91       	pop	r20
    1a14:	3f 91       	pop	r19
    1a16:	2f 91       	pop	r18
    1a18:	0f 90       	pop	r0
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	0f 90       	pop	r0
    1a1e:	1f 90       	pop	r1
    1a20:	18 95       	reti

00001a22 <GIE_voidEnableGlobal>:

#include "GIE_register.h"
#include "GIE_interface.h"

void GIE_voidEnableGlobal(void)
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1a2a:	af e5       	ldi	r26, 0x5F	; 95
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	ef e5       	ldi	r30, 0x5F	; 95
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	80 68       	ori	r24, 0x80	; 128
    1a36:	8c 93       	st	X, r24
}
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <GIE_voidDisableGlobal>:

void GIE_voidDisableGlobal(void)
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1a46:	af e5       	ldi	r26, 0x5F	; 95
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	ef e5       	ldi	r30, 0x5F	; 95
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8f 77       	andi	r24, 0x7F	; 127
    1a52:	8c 93       	st	X, r24
}
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <KPD_u8GetPressedKey>:
#include "KPD_interface.h"
#include "KPD_config.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	a2 97       	sbiw	r28, 0x22	; 34
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ColIdx;
	u8 Local_u8RowIdx;
	u8 Local_u8PressedKey=NO_PRESSED_KEY;
    1a6e:	8f ef       	ldi	r24, 0xFF	; 255
    1a70:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8PinState;
	u8 Local_u8KPDArr[KPD_ROW_NUMBER][KPD_COLUMN_NUMBER]= KPD_BUTTONS_VAL;
    1a72:	ce 01       	movw	r24, r28
    1a74:	05 96       	adiw	r24, 0x05	; 5
    1a76:	9f 8f       	std	Y+31, r25	; 0x1f
    1a78:	8e 8f       	std	Y+30, r24	; 0x1e
    1a7a:	e6 ed       	ldi	r30, 0xD6	; 214
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	f9 a3       	std	Y+33, r31	; 0x21
    1a80:	e8 a3       	std	Y+32, r30	; 0x20
    1a82:	f0 e1       	ldi	r31, 0x10	; 16
    1a84:	fa a3       	std	Y+34, r31	; 0x22
    1a86:	e8 a1       	ldd	r30, Y+32	; 0x20
    1a88:	f9 a1       	ldd	r31, Y+33	; 0x21
    1a8a:	00 80       	ld	r0, Z
    1a8c:	88 a1       	ldd	r24, Y+32	; 0x20
    1a8e:	99 a1       	ldd	r25, Y+33	; 0x21
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	99 a3       	std	Y+33, r25	; 0x21
    1a94:	88 a3       	std	Y+32, r24	; 0x20
    1a96:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1a98:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1a9a:	00 82       	st	Z, r0
    1a9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a9e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	9f 8f       	std	Y+31, r25	; 0x1f
    1aa4:	8e 8f       	std	Y+30, r24	; 0x1e
    1aa6:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa8:	91 50       	subi	r25, 0x01	; 1
    1aaa:	9a a3       	std	Y+34, r25	; 0x22
    1aac:	ea a1       	ldd	r30, Y+34	; 0x22
    1aae:	ee 23       	and	r30, r30
    1ab0:	51 f7       	brne	.-44     	; 0x1a86 <KPD_u8GetPressedKey+0x2c>
	u8 Local_u8ColumnArr[KPD_COLUMN_NUMBER]={KPD_COLUMN_PIN0,KPD_COLUMN_PIN1,KPD_COLUMN_PIN2,KPD_COLUMN_PIN3};
    1ab2:	84 e0       	ldi	r24, 0x04	; 4
    1ab4:	8d 8b       	std	Y+21, r24	; 0x15
    1ab6:	85 e0       	ldi	r24, 0x05	; 5
    1ab8:	8e 8b       	std	Y+22, r24	; 0x16
    1aba:	86 e0       	ldi	r24, 0x06	; 6
    1abc:	8f 8b       	std	Y+23, r24	; 0x17
    1abe:	87 e0       	ldi	r24, 0x07	; 7
    1ac0:	88 8f       	std	Y+24, r24	; 0x18
	u8 Local_u8RowArr[KPD_ROW_NUMBER]={KPD_ROW_PIN0,KPD_ROW_PIN1,KPD_ROW_PIN2,KPD_ROW_PIN3  };
    1ac2:	19 8e       	std	Y+25, r1	; 0x19
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	8a 8f       	std	Y+26, r24	; 0x1a
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	8b 8f       	std	Y+27, r24	; 0x1b
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	8c 8f       	std	Y+28, r24	; 0x1c

	for(Local_u8ColIdx=0;Local_u8ColIdx<KPD_COLUMN_NUMBER;Local_u8ColIdx++)
    1ad0:	1b 82       	std	Y+3, r1	; 0x03
    1ad2:	68 c0       	rjmp	.+208    	; 0x1ba4 <KPD_u8GetPressedKey+0x14a>
	{
		/* Activating the column LOW  */
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColIdx],DIO_u8PIN_LOW);
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	ce 01       	movw	r24, r28
    1adc:	45 96       	adiw	r24, 0x15	; 21
    1ade:	fc 01       	movw	r30, r24
    1ae0:	e2 0f       	add	r30, r18
    1ae2:	f3 1f       	adc	r31, r19
    1ae4:	90 81       	ld	r25, Z
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	69 2f       	mov	r22, r25
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>

		for(Local_u8RowIdx=0;Local_u8RowIdx<KPD_ROW_NUMBER;Local_u8RowIdx++)
    1af0:	1a 82       	std	Y+2, r1	; 0x02
    1af2:	43 c0       	rjmp	.+134    	; 0x1b7a <KPD_u8GetPressedKey+0x120>
		   {
			/* READING the ROW VALUE  */
			DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	ce 01       	movw	r24, r28
    1afc:	49 96       	adiw	r24, 0x19	; 25
    1afe:	fc 01       	movw	r30, r24
    1b00:	e2 0f       	add	r30, r18
    1b02:	f3 1f       	adc	r31, r19
    1b04:	90 81       	ld	r25, Z
    1b06:	9e 01       	movw	r18, r28
    1b08:	2c 5f       	subi	r18, 0xFC	; 252
    1b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	69 2f       	mov	r22, r25
    1b10:	a9 01       	movw	r20, r18
    1b12:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_u8GetPinValue>

			if(Local_u8PinState==DIO_u8PIN_LOW)
    1b16:	8c 81       	ldd	r24, Y+4	; 0x04
    1b18:	88 23       	and	r24, r24
    1b1a:	61 f5       	brne	.+88     	; 0x1b74 <KPD_u8GetPressedKey+0x11a>
			  {
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColIdx];
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	48 2f       	mov	r20, r24
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	22 0f       	add	r18, r18
    1b2a:	33 1f       	adc	r19, r19
    1b2c:	22 0f       	add	r18, r18
    1b2e:	33 1f       	adc	r19, r19
    1b30:	ce 01       	movw	r24, r28
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	82 0f       	add	r24, r18
    1b36:	93 1f       	adc	r25, r19
    1b38:	84 0f       	add	r24, r20
    1b3a:	95 1f       	adc	r25, r21
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	34 96       	adiw	r30, 0x04	; 4
    1b40:	80 81       	ld	r24, Z
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	11 c0       	rjmp	.+34     	; 0x1b68 <KPD_u8GetPressedKey+0x10e>

				/* Polling (busy waiting) until the key is released */
                while(Local_u8PinState==DIO_u8PIN_LOW)
			         {
					   DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	49 96       	adiw	r24, 0x19	; 25
    1b50:	fc 01       	movw	r30, r24
    1b52:	e2 0f       	add	r30, r18
    1b54:	f3 1f       	adc	r31, r19
    1b56:	90 81       	ld	r25, Z
    1b58:	9e 01       	movw	r18, r28
    1b5a:	2c 5f       	subi	r18, 0xFC	; 252
    1b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	69 2f       	mov	r22, r25
    1b62:	a9 01       	movw	r20, r18
    1b64:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_u8GetPinValue>
			if(Local_u8PinState==DIO_u8PIN_LOW)
			  {
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColIdx];

				/* Polling (busy waiting) until the key is released */
                while(Local_u8PinState==DIO_u8PIN_LOW)
    1b68:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6a:	88 23       	and	r24, r24
    1b6c:	61 f3       	breq	.-40     	; 0x1b46 <KPD_u8GetPressedKey+0xec>
			         {
					   DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
				     }
				return Local_u8PressedKey;
    1b6e:	f9 81       	ldd	r31, Y+1	; 0x01
    1b70:	fd 8f       	std	Y+29, r31	; 0x1d
    1b72:	1e c0       	rjmp	.+60     	; 0x1bb0 <KPD_u8GetPressedKey+0x156>
	for(Local_u8ColIdx=0;Local_u8ColIdx<KPD_COLUMN_NUMBER;Local_u8ColIdx++)
	{
		/* Activating the column LOW  */
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColIdx],DIO_u8PIN_LOW);

		for(Local_u8RowIdx=0;Local_u8RowIdx<KPD_ROW_NUMBER;Local_u8RowIdx++)
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	8f 5f       	subi	r24, 0xFF	; 255
    1b78:	8a 83       	std	Y+2, r24	; 0x02
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	84 30       	cpi	r24, 0x04	; 4
    1b7e:	08 f4       	brcc	.+2      	; 0x1b82 <KPD_u8GetPressedKey+0x128>
    1b80:	b9 cf       	rjmp	.-142    	; 0x1af4 <KPD_u8GetPressedKey+0x9a>
				return Local_u8PressedKey;
			  }
		   }

		/* Deactivate the column to  HIGH  */
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	ce 01       	movw	r24, r28
    1b8a:	45 96       	adiw	r24, 0x15	; 21
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	e2 0f       	add	r30, r18
    1b90:	f3 1f       	adc	r31, r19
    1b92:	90 81       	ld	r25, Z
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	69 2f       	mov	r22, r25
    1b98:	41 e0       	ldi	r20, 0x01	; 1
    1b9a:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>
	u8 Local_u8PinState;
	u8 Local_u8KPDArr[KPD_ROW_NUMBER][KPD_COLUMN_NUMBER]= KPD_BUTTONS_VAL;
	u8 Local_u8ColumnArr[KPD_COLUMN_NUMBER]={KPD_COLUMN_PIN0,KPD_COLUMN_PIN1,KPD_COLUMN_PIN2,KPD_COLUMN_PIN3};
	u8 Local_u8RowArr[KPD_ROW_NUMBER]={KPD_ROW_PIN0,KPD_ROW_PIN1,KPD_ROW_PIN2,KPD_ROW_PIN3  };

	for(Local_u8ColIdx=0;Local_u8ColIdx<KPD_COLUMN_NUMBER;Local_u8ColIdx++)
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	8f 5f       	subi	r24, 0xFF	; 255
    1ba2:	8b 83       	std	Y+3, r24	; 0x03
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	84 30       	cpi	r24, 0x04	; 4
    1ba8:	08 f4       	brcc	.+2      	; 0x1bac <KPD_u8GetPressedKey+0x152>
    1baa:	94 cf       	rjmp	.-216    	; 0x1ad4 <KPD_u8GetPressedKey+0x7a>

		/* Deactivate the column to  HIGH  */
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
	 }

	return Local_u8PressedKey;
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	8d 8f       	std	Y+29, r24	; 0x1d
    1bb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1bb2:	a2 96       	adiw	r28, 0x22	; 34
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_register.h"
#include "PORT_private.h"
#include "PORT_interface.h"

void PORT_voidInit(void){
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
	DDRA= PORTA_DIR;
    1bcc:	ea e3       	ldi	r30, 0x3A	; 58
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 ef       	ldi	r24, 0xF0	; 240
    1bd2:	80 83       	st	Z, r24
	DDRB= PORTB_DIR;
    1bd4:	e7 e3       	ldi	r30, 0x37	; 55
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	8f ef       	ldi	r24, 0xFF	; 255
    1bda:	80 83       	st	Z, r24
	DDRC= PORTC_DIR;
    1bdc:	e4 e3       	ldi	r30, 0x34	; 52
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	80 83       	st	Z, r24
	DDRD= PORTD_DIR;
    1be4:	e1 e3       	ldi	r30, 0x31	; 49
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	89 ee       	ldi	r24, 0xE9	; 233
    1bea:	80 83       	st	Z, r24
	
	PORTA= PORTA_INITIAL_VALUE;
    1bec:	eb e3       	ldi	r30, 0x3B	; 59
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	8f ef       	ldi	r24, 0xFF	; 255
    1bf2:	80 83       	st	Z, r24
	PORTB= PORTB_INITIAL_VALUE;
    1bf4:	e8 e3       	ldi	r30, 0x38	; 56
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	10 82       	st	Z, r1
	PORTC= PORTC_INITIAL_VALUE;
    1bfa:	e5 e3       	ldi	r30, 0x35	; 53
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	10 82       	st	Z, r1
	PORTD= PORTD_INITIAL_VALUE;
    1c00:	e2 e3       	ldi	r30, 0x32	; 50
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	84 e0       	ldi	r24, 0x04	; 4
    1c06:	80 83       	st	Z, r24
}
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <SSD_voidSendNumber>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_register.h"


void SSD_voidSendNumber(SSD_t *ptr, u8 number){
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <SSD_voidSendNumber+0x6>
    1c14:	0f 92       	push	r0
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	9a 83       	std	Y+2, r25	; 0x02
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	6b 83       	std	Y+3, r22	; 0x03
	if (ptr->type== COM_ANODE){
    1c20:	e9 81       	ldd	r30, Y+1	; 0x01
    1c22:	fa 81       	ldd	r31, Y+2	; 0x02
    1c24:	80 81       	ld	r24, Z
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	51 f4       	brne	.+20     	; 0x1c3e <SSD_voidSendNumber+0x30>
		DIO_u8SetPinValue(ptr->enable_port,ptr->enable_pin,SSD_TYPE);
    1c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2e:	83 81       	ldd	r24, Z+3	; 0x03
    1c30:	e9 81       	ldd	r30, Y+1	; 0x01
    1c32:	fa 81       	ldd	r31, Y+2	; 0x02
    1c34:	92 81       	ldd	r25, Z+2	; 0x02
    1c36:	69 2f       	mov	r22, r25
    1c38:	40 e0       	ldi	r20, 0x00	; 0
    1c3a:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>
	}
	if(ptr->type==COM_CATHODE){
    1c3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c40:	fa 81       	ldd	r31, Y+2	; 0x02
    1c42:	80 81       	ld	r24, Z
    1c44:	88 23       	and	r24, r24
    1c46:	e1 f4       	brne	.+56     	; 0x1c80 <SSD_voidSendNumber+0x72>
		DIO_u8SetPinValue(ptr->enable_port,ptr->enable_pin,SSD_TYPE);
    1c48:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4c:	83 81       	ldd	r24, Z+3	; 0x03
    1c4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c50:	fa 81       	ldd	r31, Y+2	; 0x02
    1c52:	92 81       	ldd	r25, Z+2	; 0x02
    1c54:	69 2f       	mov	r22, r25
    1c56:	40 e0       	ldi	r20, 0x00	; 0
    1c58:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(ptr->data_port,BCD[number]);
    1c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c60:	21 81       	ldd	r18, Z+1	; 0x01
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	88 2f       	mov	r24, r24
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	ee 53       	subi	r30, 0x3E	; 62
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	98 2f       	mov	r25, r24
    1c78:	82 2f       	mov	r24, r18
    1c7a:	69 2f       	mov	r22, r25
    1c7c:	0e 94 96 09 	call	0x132c	; 0x132c <DIO_u8SetPortValue>
	}
}
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <SSD_voidOn>:

void SSD_voidOn(SSD_t * ptr){
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <SSD_voidOn+0x6>
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	9a 83       	std	Y+2, r25	; 0x02
    1c98:	89 83       	std	Y+1, r24	; 0x01
	if (ptr->type== COM_ANODE){
    1c9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9e:	80 81       	ld	r24, Z
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	51 f4       	brne	.+20     	; 0x1cb8 <SSD_voidOn+0x2c>
		DIO_u8SetPinValue(ptr->enable_port,ptr->enable_pin,DIO_u8PIN_HIGH);
    1ca4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca8:	83 81       	ldd	r24, Z+3	; 0x03
    1caa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cac:	fa 81       	ldd	r31, Y+2	; 0x02
    1cae:	92 81       	ldd	r25, Z+2	; 0x02
    1cb0:	69 2f       	mov	r22, r25
    1cb2:	41 e0       	ldi	r20, 0x01	; 1
    1cb4:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>

	}
	if(ptr->type==COM_CATHODE){
    1cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cba:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbc:	80 81       	ld	r24, Z
    1cbe:	88 23       	and	r24, r24
    1cc0:	51 f4       	brne	.+20     	; 0x1cd6 <SSD_voidOn+0x4a>
		DIO_u8SetPinValue(ptr->enable_port,ptr->enable_pin,DIO_u8PIN_LOW);
    1cc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc6:	83 81       	ldd	r24, Z+3	; 0x03
    1cc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cca:	fa 81       	ldd	r31, Y+2	; 0x02
    1ccc:	92 81       	ldd	r25, Z+2	; 0x02
    1cce:	69 2f       	mov	r22, r25
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>
	}

}
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <SSD_voidOff>:

void SSD_voidOff(SSD_t * ptr){
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <SSD_voidOff+0x6>
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	9a 83       	std	Y+2, r25	; 0x02
    1cec:	89 83       	std	Y+1, r24	; 0x01
	if (ptr->type== COM_ANODE){
    1cee:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf2:	80 81       	ld	r24, Z
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	51 f4       	brne	.+20     	; 0x1d0c <SSD_voidOff+0x2c>
		DIO_u8SetPinValue(ptr->enable_port,ptr->enable_pin,DIO_u8PIN_LOW);
    1cf8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfc:	83 81       	ldd	r24, Z+3	; 0x03
    1cfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1d00:	fa 81       	ldd	r31, Y+2	; 0x02
    1d02:	92 81       	ldd	r25, Z+2	; 0x02
    1d04:	69 2f       	mov	r22, r25
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>
	}
	if(ptr->type==COM_CATHODE){
    1d0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d10:	80 81       	ld	r24, Z
    1d12:	88 23       	and	r24, r24
    1d14:	51 f4       	brne	.+20     	; 0x1d2a <SSD_voidOff+0x4a>
		DIO_u8SetPinValue(ptr->enable_port,ptr->enable_pin,DIO_u8PIN_HIGH);
    1d16:	e9 81       	ldd	r30, Y+1	; 0x01
    1d18:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1a:	83 81       	ldd	r24, Z+3	; 0x03
    1d1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d20:	92 81       	ldd	r25, Z+2	; 0x02
    1d22:	69 2f       	mov	r22, r25
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>
	}
}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <main>:
void LOGIN(void);
void SHUTDOWN(void);
u8 flag = 0;

void main()
{
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    1d3c:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <PORT_voidInit>
	CLCD_voidInit();
    1d40:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidInit>
	EXTI_voidINT0Init();
    1d44:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <EXTI_voidINT0Init>
	EXTI_u8INT0SetCallBack(&INT0_ISR, EXTI_INT0);
    1d48:	83 ec       	ldi	r24, 0xC3	; 195
    1d4a:	9e e0       	ldi	r25, 0x0E	; 14
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <EXTI_u8INT0SetCallBack>
	GIE_voidEnableGlobal();
    1d52:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <GIE_voidEnableGlobal>

	while(1)
	{
		if (flag == 1)
    1d56:	80 91 ec 00 	lds	r24, 0x00EC
    1d5a:	81 30       	cpi	r24, 0x01	; 1
    1d5c:	19 f4       	brne	.+6      	; 0x1d64 <main+0x30>
		{
			WELCOME();
    1d5e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <WELCOME>
    1d62:	f9 cf       	rjmp	.-14     	; 0x1d56 <main+0x22>
		}

		else if (flag == 2)
    1d64:	80 91 ec 00 	lds	r24, 0x00EC
    1d68:	82 30       	cpi	r24, 0x02	; 2
    1d6a:	19 f4       	brne	.+6      	; 0x1d72 <main+0x3e>
		{
			LOGIN();
    1d6c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LOGIN>
    1d70:	f2 cf       	rjmp	.-28     	; 0x1d56 <main+0x22>
		}

		else if (flag == 3)
    1d72:	80 91 ec 00 	lds	r24, 0x00EC
    1d76:	83 30       	cpi	r24, 0x03	; 3
    1d78:	71 f7       	brne	.-36     	; 0x1d56 <main+0x22>
		{
			DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN3, DIO_u8PIN_HIGH);
    1d7a:	83 e0       	ldi	r24, 0x03	; 3
    1d7c:	63 e0       	ldi	r22, 0x03	; 3
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	0e 94 84 08 	call	0x1108	; 0x1108 <DIO_u8SetPinValue>
    1d84:	e8 cf       	rjmp	.-48     	; 0x1d56 <main+0x22>

00001d86 <INT0_ISR>:

	}
}

void INT0_ISR(void)
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
	flag = 1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	80 93 ec 00 	sts	0x00EC, r24
}
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <WELCOME>:

void WELCOME(void)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	6c 97       	sbiw	r28, 0x1c	; 28
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidGotoXY(2, 0);
    1dae:	82 e0       	ldi	r24, 0x02	; 2
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	0e 94 26 08 	call	0x104c	; 0x104c <CLCD_voidGotoXY>
    CLCD_voidSendString("WELCOME HOME");
    1db6:	80 e6       	ldi	r24, 0x60	; 96
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendString>
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	aa ef       	ldi	r26, 0xFA	; 250
    1dc4:	b4 e4       	ldi	r27, 0x44	; 68
    1dc6:	89 8f       	std	Y+25, r24	; 0x19
    1dc8:	9a 8f       	std	Y+26, r25	; 0x1a
    1dca:	ab 8f       	std	Y+27, r26	; 0x1b
    1dcc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4a ef       	ldi	r20, 0xFA	; 250
    1ddc:	54 e4       	ldi	r21, 0x44	; 68
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	8d 8b       	std	Y+21, r24	; 0x15
    1de8:	9e 8b       	std	Y+22, r25	; 0x16
    1dea:	af 8b       	std	Y+23, r26	; 0x17
    1dec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dee:	6d 89       	ldd	r22, Y+21	; 0x15
    1df0:	7e 89       	ldd	r23, Y+22	; 0x16
    1df2:	8f 89       	ldd	r24, Y+23	; 0x17
    1df4:	98 8d       	ldd	r25, Y+24	; 0x18
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	2c f4       	brge	.+10     	; 0x1e10 <WELCOME+0x76>
		__ticks = 1;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9c 8b       	std	Y+20, r25	; 0x14
    1e0c:	8b 8b       	std	Y+19, r24	; 0x13
    1e0e:	3f c0       	rjmp	.+126    	; 0x1e8e <WELCOME+0xf4>
	else if (__tmp > 65535)
    1e10:	6d 89       	ldd	r22, Y+21	; 0x15
    1e12:	7e 89       	ldd	r23, Y+22	; 0x16
    1e14:	8f 89       	ldd	r24, Y+23	; 0x17
    1e16:	98 8d       	ldd	r25, Y+24	; 0x18
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	4f e7       	ldi	r20, 0x7F	; 127
    1e1e:	57 e4       	ldi	r21, 0x47	; 71
    1e20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e24:	18 16       	cp	r1, r24
    1e26:	4c f5       	brge	.+82     	; 0x1e7a <WELCOME+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	69 8d       	ldd	r22, Y+25	; 0x19
    1e2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e2       	ldi	r20, 0x20	; 32
    1e36:	51 e4       	ldi	r21, 0x41	; 65
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9c 8b       	std	Y+20, r25	; 0x14
    1e4e:	8b 8b       	std	Y+19, r24	; 0x13
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <WELCOME+0xd6>
    1e52:	88 ec       	ldi	r24, 0xC8	; 200
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9a 8b       	std	Y+18, r25	; 0x12
    1e58:	89 8b       	std	Y+17, r24	; 0x11
    1e5a:	89 89       	ldd	r24, Y+17	; 0x11
    1e5c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <WELCOME+0xc4>
    1e62:	9a 8b       	std	Y+18, r25	; 0x12
    1e64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e66:	8b 89       	ldd	r24, Y+19	; 0x13
    1e68:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	9c 8b       	std	Y+20, r25	; 0x14
    1e6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e70:	8b 89       	ldd	r24, Y+19	; 0x13
    1e72:	9c 89       	ldd	r25, Y+20	; 0x14
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	69 f7       	brne	.-38     	; 0x1e52 <WELCOME+0xb8>
    1e78:	14 c0       	rjmp	.+40     	; 0x1ea2 <WELCOME+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e80:	98 8d       	ldd	r25, Y+24	; 0x18
    1e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	9c 8b       	std	Y+20, r25	; 0x14
    1e8c:	8b 8b       	std	Y+19, r24	; 0x13
    1e8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e90:	9c 89       	ldd	r25, Y+20	; 0x14
    1e92:	98 8b       	std	Y+16, r25	; 0x10
    1e94:	8f 87       	std	Y+15, r24	; 0x0f
    1e96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e98:	98 89       	ldd	r25, Y+16	; 0x10
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <WELCOME+0x100>
    1e9e:	98 8b       	std	Y+16, r25	; 0x10
    1ea0:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2000);
    CLCD_voidSendCommand(0b00000001);
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	aa e7       	ldi	r26, 0x7A	; 122
    1eae:	b4 e4       	ldi	r27, 0x44	; 68
    1eb0:	8b 87       	std	Y+11, r24	; 0x0b
    1eb2:	9c 87       	std	Y+12, r25	; 0x0c
    1eb4:	ad 87       	std	Y+13, r26	; 0x0d
    1eb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	4a ef       	ldi	r20, 0xFA	; 250
    1ec6:	54 e4       	ldi	r21, 0x44	; 68
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	8f 83       	std	Y+7, r24	; 0x07
    1ed2:	98 87       	std	Y+8, r25	; 0x08
    1ed4:	a9 87       	std	Y+9, r26	; 0x09
    1ed6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eda:	78 85       	ldd	r23, Y+8	; 0x08
    1edc:	89 85       	ldd	r24, Y+9	; 0x09
    1ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	2c f4       	brge	.+10     	; 0x1efa <WELCOME+0x160>
		__ticks = 1;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9e 83       	std	Y+6, r25	; 0x06
    1ef6:	8d 83       	std	Y+5, r24	; 0x05
    1ef8:	3f c0       	rjmp	.+126    	; 0x1f78 <WELCOME+0x1de>
	else if (__tmp > 65535)
    1efa:	6f 81       	ldd	r22, Y+7	; 0x07
    1efc:	78 85       	ldd	r23, Y+8	; 0x08
    1efe:	89 85       	ldd	r24, Y+9	; 0x09
    1f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	3f ef       	ldi	r19, 0xFF	; 255
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	57 e4       	ldi	r21, 0x47	; 71
    1f0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	4c f5       	brge	.+82     	; 0x1f64 <WELCOME+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	51 e4       	ldi	r21, 0x41	; 65
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <WELCOME+0x1c0>
    1f3c:	88 ec       	ldi	r24, 0xC8	; 200
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9c 83       	std	Y+4, r25	; 0x04
    1f42:	8b 83       	std	Y+3, r24	; 0x03
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <WELCOME+0x1ae>
    1f4c:	9c 83       	std	Y+4, r25	; 0x04
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	9e 81       	ldd	r25, Y+6	; 0x06
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	9e 83       	std	Y+6, r25	; 0x06
    1f58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	69 f7       	brne	.-38     	; 0x1f3c <WELCOME+0x1a2>
    1f62:	14 c0       	rjmp	.+40     	; 0x1f8c <WELCOME+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f64:	6f 81       	ldd	r22, Y+7	; 0x07
    1f66:	78 85       	ldd	r23, Y+8	; 0x08
    1f68:	89 85       	ldd	r24, Y+9	; 0x09
    1f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9e 83       	std	Y+6, r25	; 0x06
    1f76:	8d 83       	std	Y+5, r24	; 0x05
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <WELCOME+0x1ea>
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);
    flag = 2;
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
    1f8e:	80 93 ec 00 	sts	0x00EC, r24
}
    1f92:	6c 96       	adiw	r28, 0x1c	; 28
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	de bf       	out	0x3e, r29	; 62
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	cd bf       	out	0x3d, r28	; 61
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <LOGIN>:

void LOGIN(void)
{
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	cb 58       	subi	r28, 0x8B	; 139
    1fb2:	d0 40       	sbci	r29, 0x00	; 0
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ValuePressed;
	u8 Local_u8Itterator;
	u8 Local_u8SSD_Itterator;
	u8 User_ID_Arr[3];
	u8 Password_Arr[3];
	SSD_t obj ={SSD_TYPE,SSD_PORTB,SSD_ENABLE_PIN,SSD_ENABLE_PORT};
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e8 57       	subi	r30, 0x78	; 120
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	10 82       	st	Z, r1
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e8 57       	subi	r30, 0x78	; 120
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	81 83       	std	Z+1, r24	; 0x01
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	e8 57       	subi	r30, 0x78	; 120
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	12 82       	std	Z+2, r1	; 0x02
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e8 57       	subi	r30, 0x78	; 120
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	83 e0       	ldi	r24, 0x03	; 3
    1fe0:	83 83       	std	Z+3, r24	; 0x03

	CLCD_voidGotoXY(0, 0);
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	60 e0       	ldi	r22, 0x00	; 0
    1fe6:	0e 94 26 08 	call	0x104c	; 0x104c <CLCD_voidGotoXY>
	CLCD_voidSendString("Enter ID : ");
    1fea:	8d e6       	ldi	r24, 0x6D	; 109
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendString>

	for (Local_u8Itterator=0;Local_u8Itterator<3;Local_u8Itterator++)
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e0 58       	subi	r30, 0x80	; 128
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	10 82       	st	Z, r1
    1ffa:	39 c0       	rjmp	.+114    	; 0x206e <LOGIN+0xca>
	{
		Local_u8ValuePressed = KPD_u8GetPressedKey();
    1ffc:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <KPD_u8GetPressedKey>
    2000:	fe 01       	movw	r30, r28
    2002:	ef 57       	subi	r30, 0x7F	; 127
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 83       	st	Z, r24
    2008:	06 c0       	rjmp	.+12     	; 0x2016 <LOGIN+0x72>
		while(Local_u8ValuePressed == 255)
		{
		 Local_u8ValuePressed = KPD_u8GetPressedKey();
    200a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <KPD_u8GetPressedKey>
    200e:	fe 01       	movw	r30, r28
    2010:	ef 57       	subi	r30, 0x7F	; 127
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	80 83       	st	Z, r24
	CLCD_voidSendString("Enter ID : ");

	for (Local_u8Itterator=0;Local_u8Itterator<3;Local_u8Itterator++)
	{
		Local_u8ValuePressed = KPD_u8GetPressedKey();
		while(Local_u8ValuePressed == 255)
    2016:	fe 01       	movw	r30, r28
    2018:	ef 57       	subi	r30, 0x7F	; 127
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	80 81       	ld	r24, Z
    201e:	8f 3f       	cpi	r24, 0xFF	; 255
    2020:	a1 f3       	breq	.-24     	; 0x200a <LOGIN+0x66>
		{
		 Local_u8ValuePressed = KPD_u8GetPressedKey();
		}
		User_ID_Arr[Local_u8Itterator] = Local_u8ValuePressed;
    2022:	fe 01       	movw	r30, r28
    2024:	e0 58       	subi	r30, 0x80	; 128
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	80 81       	ld	r24, Z
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	ce 01       	movw	r24, r28
    2030:	8e 57       	subi	r24, 0x7E	; 126
    2032:	9f 4f       	sbci	r25, 0xFF	; 255
    2034:	dc 01       	movw	r26, r24
    2036:	a2 0f       	add	r26, r18
    2038:	b3 1f       	adc	r27, r19
    203a:	fe 01       	movw	r30, r28
    203c:	ef 57       	subi	r30, 0x7F	; 127
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	80 81       	ld	r24, Z
    2042:	8c 93       	st	X, r24
		CLCD_voidSendNumber(Local_u8ValuePressed);
    2044:	fe 01       	movw	r30, r28
    2046:	ef 57       	subi	r30, 0x7F	; 127
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 81       	ld	r24, Z
    204c:	88 2f       	mov	r24, r24
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	a0 e0       	ldi	r26, 0x00	; 0
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	bc 01       	movw	r22, r24
    2056:	cd 01       	movw	r24, r26
    2058:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_voidSendNumber>
	SSD_t obj ={SSD_TYPE,SSD_PORTB,SSD_ENABLE_PIN,SSD_ENABLE_PORT};

	CLCD_voidGotoXY(0, 0);
	CLCD_voidSendString("Enter ID : ");

	for (Local_u8Itterator=0;Local_u8Itterator<3;Local_u8Itterator++)
    205c:	de 01       	movw	r26, r28
    205e:	a0 58       	subi	r26, 0x80	; 128
    2060:	bf 4f       	sbci	r27, 0xFF	; 255
    2062:	fe 01       	movw	r30, r28
    2064:	e0 58       	subi	r30, 0x80	; 128
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	80 81       	ld	r24, Z
    206a:	8f 5f       	subi	r24, 0xFF	; 255
    206c:	8c 93       	st	X, r24
    206e:	fe 01       	movw	r30, r28
    2070:	e0 58       	subi	r30, 0x80	; 128
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	80 81       	ld	r24, Z
    2076:	83 30       	cpi	r24, 0x03	; 3
    2078:	08 f2       	brcs	.-126    	; 0x1ffc <LOGIN+0x58>
		}
		User_ID_Arr[Local_u8Itterator] = Local_u8ValuePressed;
		CLCD_voidSendNumber(Local_u8ValuePressed);
	}

	if ((User_ID_Arr[0]!=1) || (User_ID_Arr[1]!=2) || (User_ID_Arr[2]!=3))       /* ID is INCORRECT */
    207a:	fe 01       	movw	r30, r28
    207c:	ee 57       	subi	r30, 0x7E	; 126
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 81       	ld	r24, Z
    2082:	81 30       	cpi	r24, 0x01	; 1
    2084:	69 f4       	brne	.+26     	; 0x20a0 <LOGIN+0xfc>
    2086:	fe 01       	movw	r30, r28
    2088:	ee 57       	subi	r30, 0x7E	; 126
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	81 81       	ldd	r24, Z+1	; 0x01
    208e:	82 30       	cpi	r24, 0x02	; 2
    2090:	39 f4       	brne	.+14     	; 0x20a0 <LOGIN+0xfc>
    2092:	fe 01       	movw	r30, r28
    2094:	ee 57       	subi	r30, 0x7E	; 126
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	83 30       	cpi	r24, 0x03	; 3
    209c:	09 f4       	brne	.+2      	; 0x20a0 <LOGIN+0xfc>
    209e:	70 c1       	rjmp	.+736    	; 0x2380 <LOGIN+0x3dc>
    20a0:	fe 01       	movw	r30, r28
    20a2:	e5 58       	subi	r30, 0x85	; 133
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	aa ef       	ldi	r26, 0xFA	; 250
    20ac:	b3 e4       	ldi	r27, 0x43	; 67
    20ae:	80 83       	st	Z, r24
    20b0:	91 83       	std	Z+1, r25	; 0x01
    20b2:	a2 83       	std	Z+2, r26	; 0x02
    20b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b6:	8e 01       	movw	r16, r28
    20b8:	09 58       	subi	r16, 0x89	; 137
    20ba:	1f 4f       	sbci	r17, 0xFF	; 255
    20bc:	fe 01       	movw	r30, r28
    20be:	e5 58       	subi	r30, 0x85	; 133
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	60 81       	ld	r22, Z
    20c4:	71 81       	ldd	r23, Z+1	; 0x01
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	93 81       	ldd	r25, Z+3	; 0x03
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	4a ef       	ldi	r20, 0xFA	; 250
    20d0:	54 e4       	ldi	r21, 0x44	; 68
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	f8 01       	movw	r30, r16
    20dc:	80 83       	st	Z, r24
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	a2 83       	std	Z+2, r26	; 0x02
    20e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20e4:	fe 01       	movw	r30, r28
    20e6:	e9 58       	subi	r30, 0x89	; 137
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	60 81       	ld	r22, Z
    20ec:	71 81       	ldd	r23, Z+1	; 0x01
    20ee:	82 81       	ldd	r24, Z+2	; 0x02
    20f0:	93 81       	ldd	r25, Z+3	; 0x03
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e8       	ldi	r20, 0x80	; 128
    20f8:	5f e3       	ldi	r21, 0x3F	; 63
    20fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20fe:	88 23       	and	r24, r24
    2100:	44 f4       	brge	.+16     	; 0x2112 <LOGIN+0x16e>
		__ticks = 1;
    2102:	fe 01       	movw	r30, r28
    2104:	eb 58       	subi	r30, 0x8B	; 139
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
    2110:	64 c0       	rjmp	.+200    	; 0x21da <LOGIN+0x236>
	else if (__tmp > 65535)
    2112:	fe 01       	movw	r30, r28
    2114:	e9 58       	subi	r30, 0x89	; 137
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	60 81       	ld	r22, Z
    211a:	71 81       	ldd	r23, Z+1	; 0x01
    211c:	82 81       	ldd	r24, Z+2	; 0x02
    211e:	93 81       	ldd	r25, Z+3	; 0x03
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	3f ef       	ldi	r19, 0xFF	; 255
    2124:	4f e7       	ldi	r20, 0x7F	; 127
    2126:	57 e4       	ldi	r21, 0x47	; 71
    2128:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    212c:	18 16       	cp	r1, r24
    212e:	0c f0       	brlt	.+2      	; 0x2132 <LOGIN+0x18e>
    2130:	43 c0       	rjmp	.+134    	; 0x21b8 <LOGIN+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2132:	fe 01       	movw	r30, r28
    2134:	e5 58       	subi	r30, 0x85	; 133
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	60 81       	ld	r22, Z
    213a:	71 81       	ldd	r23, Z+1	; 0x01
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	93 81       	ldd	r25, Z+3	; 0x03
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e2       	ldi	r20, 0x20	; 32
    2146:	51 e4       	ldi	r21, 0x41	; 65
    2148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	8e 01       	movw	r16, r28
    2152:	0b 58       	subi	r16, 0x8B	; 139
    2154:	1f 4f       	sbci	r17, 0xFF	; 255
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	f8 01       	movw	r30, r16
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	80 83       	st	Z, r24
    2168:	1f c0       	rjmp	.+62     	; 0x21a8 <LOGIN+0x204>
    216a:	fe 01       	movw	r30, r28
    216c:	ed 58       	subi	r30, 0x8D	; 141
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	88 ec       	ldi	r24, 0xC8	; 200
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	91 83       	std	Z+1, r25	; 0x01
    2176:	80 83       	st	Z, r24
    2178:	fe 01       	movw	r30, r28
    217a:	ed 58       	subi	r30, 0x8D	; 141
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LOGIN+0x1de>
    2186:	fe 01       	movw	r30, r28
    2188:	ed 58       	subi	r30, 0x8D	; 141
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2190:	de 01       	movw	r26, r28
    2192:	ab 58       	subi	r26, 0x8B	; 139
    2194:	bf 4f       	sbci	r27, 0xFF	; 255
    2196:	fe 01       	movw	r30, r28
    2198:	eb 58       	subi	r30, 0x8B	; 139
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 81       	ld	r24, Z
    219e:	91 81       	ldd	r25, Z+1	; 0x01
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	11 96       	adiw	r26, 0x01	; 1
    21a4:	9c 93       	st	X, r25
    21a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a8:	fe 01       	movw	r30, r28
    21aa:	eb 58       	subi	r30, 0x8B	; 139
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 81       	ld	r24, Z
    21b0:	91 81       	ldd	r25, Z+1	; 0x01
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	d1 f6       	brne	.-76     	; 0x216a <LOGIN+0x1c6>
    21b6:	27 c0       	rjmp	.+78     	; 0x2206 <LOGIN+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b8:	8e 01       	movw	r16, r28
    21ba:	0b 58       	subi	r16, 0x8B	; 139
    21bc:	1f 4f       	sbci	r17, 0xFF	; 255
    21be:	fe 01       	movw	r30, r28
    21c0:	e9 58       	subi	r30, 0x89	; 137
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	60 81       	ld	r22, Z
    21c6:	71 81       	ldd	r23, Z+1	; 0x01
    21c8:	82 81       	ldd	r24, Z+2	; 0x02
    21ca:	93 81       	ldd	r25, Z+3	; 0x03
    21cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	f8 01       	movw	r30, r16
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	80 83       	st	Z, r24
    21da:	de 01       	movw	r26, r28
    21dc:	af 58       	subi	r26, 0x8F	; 143
    21de:	bf 4f       	sbci	r27, 0xFF	; 255
    21e0:	fe 01       	movw	r30, r28
    21e2:	eb 58       	subi	r30, 0x8B	; 139
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	80 81       	ld	r24, Z
    21e8:	91 81       	ldd	r25, Z+1	; 0x01
    21ea:	8d 93       	st	X+, r24
    21ec:	9c 93       	st	X, r25
    21ee:	fe 01       	movw	r30, r28
    21f0:	ef 58       	subi	r30, 0x8F	; 143
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	80 81       	ld	r24, Z
    21f6:	91 81       	ldd	r25, Z+1	; 0x01
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <LOGIN+0x254>
    21fc:	fe 01       	movw	r30, r28
    21fe:	ef 58       	subi	r30, 0x8F	; 143
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	91 83       	std	Z+1, r25	; 0x01
    2204:	80 83       	st	Z, r24
	{
		_delay_ms(500);
	    CLCD_voidSendCommand(0b00000001);
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	    CLCD_voidSendString("Wrong ID");
    220c:	89 e7       	ldi	r24, 0x79	; 121
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendString>
    2214:	fe 01       	movw	r30, r28
    2216:	e3 59       	subi	r30, 0x93	; 147
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	aa e7       	ldi	r26, 0x7A	; 122
    2220:	b4 e4       	ldi	r27, 0x44	; 68
    2222:	80 83       	st	Z, r24
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	a2 83       	std	Z+2, r26	; 0x02
    2228:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222a:	8e 01       	movw	r16, r28
    222c:	07 59       	subi	r16, 0x97	; 151
    222e:	1f 4f       	sbci	r17, 0xFF	; 255
    2230:	fe 01       	movw	r30, r28
    2232:	e3 59       	subi	r30, 0x93	; 147
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	60 81       	ld	r22, Z
    2238:	71 81       	ldd	r23, Z+1	; 0x01
    223a:	82 81       	ldd	r24, Z+2	; 0x02
    223c:	93 81       	ldd	r25, Z+3	; 0x03
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	4a ef       	ldi	r20, 0xFA	; 250
    2244:	54 e4       	ldi	r21, 0x44	; 68
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	f8 01       	movw	r30, r16
    2250:	80 83       	st	Z, r24
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	a2 83       	std	Z+2, r26	; 0x02
    2256:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2258:	fe 01       	movw	r30, r28
    225a:	e7 59       	subi	r30, 0x97	; 151
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e8       	ldi	r20, 0x80	; 128
    226c:	5f e3       	ldi	r21, 0x3F	; 63
    226e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2272:	88 23       	and	r24, r24
    2274:	44 f4       	brge	.+16     	; 0x2286 <LOGIN+0x2e2>
		__ticks = 1;
    2276:	fe 01       	movw	r30, r28
    2278:	e9 59       	subi	r30, 0x99	; 153
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	80 83       	st	Z, r24
    2284:	64 c0       	rjmp	.+200    	; 0x234e <LOGIN+0x3aa>
	else if (__tmp > 65535)
    2286:	fe 01       	movw	r30, r28
    2288:	e7 59       	subi	r30, 0x97	; 151
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	60 81       	ld	r22, Z
    228e:	71 81       	ldd	r23, Z+1	; 0x01
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	3f ef       	ldi	r19, 0xFF	; 255
    2298:	4f e7       	ldi	r20, 0x7F	; 127
    229a:	57 e4       	ldi	r21, 0x47	; 71
    229c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a0:	18 16       	cp	r1, r24
    22a2:	0c f0       	brlt	.+2      	; 0x22a6 <LOGIN+0x302>
    22a4:	43 c0       	rjmp	.+134    	; 0x232c <LOGIN+0x388>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a6:	fe 01       	movw	r30, r28
    22a8:	e3 59       	subi	r30, 0x93	; 147
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	60 81       	ld	r22, Z
    22ae:	71 81       	ldd	r23, Z+1	; 0x01
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	93 81       	ldd	r25, Z+3	; 0x03
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e2       	ldi	r20, 0x20	; 32
    22ba:	51 e4       	ldi	r21, 0x41	; 65
    22bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	8e 01       	movw	r16, r28
    22c6:	09 59       	subi	r16, 0x99	; 153
    22c8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ca:	bc 01       	movw	r22, r24
    22cc:	cd 01       	movw	r24, r26
    22ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	f8 01       	movw	r30, r16
    22d8:	91 83       	std	Z+1, r25	; 0x01
    22da:	80 83       	st	Z, r24
    22dc:	1f c0       	rjmp	.+62     	; 0x231c <LOGIN+0x378>
    22de:	fe 01       	movw	r30, r28
    22e0:	eb 59       	subi	r30, 0x9B	; 155
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	88 ec       	ldi	r24, 0xC8	; 200
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	91 83       	std	Z+1, r25	; 0x01
    22ea:	80 83       	st	Z, r24
    22ec:	fe 01       	movw	r30, r28
    22ee:	eb 59       	subi	r30, 0x9B	; 155
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 81       	ld	r24, Z
    22f4:	91 81       	ldd	r25, Z+1	; 0x01
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <LOGIN+0x352>
    22fa:	fe 01       	movw	r30, r28
    22fc:	eb 59       	subi	r30, 0x9B	; 155
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	91 83       	std	Z+1, r25	; 0x01
    2302:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	de 01       	movw	r26, r28
    2306:	a9 59       	subi	r26, 0x99	; 153
    2308:	bf 4f       	sbci	r27, 0xFF	; 255
    230a:	fe 01       	movw	r30, r28
    230c:	e9 59       	subi	r30, 0x99	; 153
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	80 81       	ld	r24, Z
    2312:	91 81       	ldd	r25, Z+1	; 0x01
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	11 96       	adiw	r26, 0x01	; 1
    2318:	9c 93       	st	X, r25
    231a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231c:	fe 01       	movw	r30, r28
    231e:	e9 59       	subi	r30, 0x99	; 153
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	80 81       	ld	r24, Z
    2324:	91 81       	ldd	r25, Z+1	; 0x01
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	d1 f6       	brne	.-76     	; 0x22de <LOGIN+0x33a>
    232a:	27 c0       	rjmp	.+78     	; 0x237a <LOGIN+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232c:	8e 01       	movw	r16, r28
    232e:	09 59       	subi	r16, 0x99	; 153
    2330:	1f 4f       	sbci	r17, 0xFF	; 255
    2332:	fe 01       	movw	r30, r28
    2334:	e7 59       	subi	r30, 0x97	; 151
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	60 81       	ld	r22, Z
    233a:	71 81       	ldd	r23, Z+1	; 0x01
    233c:	82 81       	ldd	r24, Z+2	; 0x02
    233e:	93 81       	ldd	r25, Z+3	; 0x03
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	f8 01       	movw	r30, r16
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	80 83       	st	Z, r24
    234e:	de 01       	movw	r26, r28
    2350:	ad 59       	subi	r26, 0x9D	; 157
    2352:	bf 4f       	sbci	r27, 0xFF	; 255
    2354:	fe 01       	movw	r30, r28
    2356:	e9 59       	subi	r30, 0x99	; 153
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	80 81       	ld	r24, Z
    235c:	91 81       	ldd	r25, Z+1	; 0x01
    235e:	8d 93       	st	X+, r24
    2360:	9c 93       	st	X, r25
    2362:	fe 01       	movw	r30, r28
    2364:	ed 59       	subi	r30, 0x9D	; 157
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	80 81       	ld	r24, Z
    236a:	91 81       	ldd	r25, Z+1	; 0x01
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LOGIN+0x3c8>
    2370:	fe 01       	movw	r30, r28
    2372:	ed 59       	subi	r30, 0x9D	; 157
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	80 83       	st	Z, r24
	    _delay_ms(1000);
	    CLCD_voidSendCommand(0b00000001);
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	}

	if ((User_ID_Arr[0]==1) && (User_ID_Arr[1]==2) && (User_ID_Arr[2]==3))       /*ID is CORRECT */
    2380:	fe 01       	movw	r30, r28
    2382:	ee 57       	subi	r30, 0x7E	; 126
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	80 81       	ld	r24, Z
    2388:	81 30       	cpi	r24, 0x01	; 1
    238a:	09 f0       	breq	.+2      	; 0x238e <LOGIN+0x3ea>
    238c:	7c c4       	rjmp	.+2296   	; 0x2c86 <LOGIN+0xce2>
    238e:	fe 01       	movw	r30, r28
    2390:	ee 57       	subi	r30, 0x7E	; 126
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	81 81       	ldd	r24, Z+1	; 0x01
    2396:	82 30       	cpi	r24, 0x02	; 2
    2398:	09 f0       	breq	.+2      	; 0x239c <LOGIN+0x3f8>
    239a:	75 c4       	rjmp	.+2282   	; 0x2c86 <LOGIN+0xce2>
    239c:	fe 01       	movw	r30, r28
    239e:	ee 57       	subi	r30, 0x7E	; 126
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	83 30       	cpi	r24, 0x03	; 3
    23a6:	09 f0       	breq	.+2      	; 0x23aa <LOGIN+0x406>
    23a8:	6e c4       	rjmp	.+2268   	; 0x2c86 <LOGIN+0xce2>
    23aa:	fe 01       	movw	r30, r28
    23ac:	e1 5a       	subi	r30, 0xA1	; 161
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	aa ef       	ldi	r26, 0xFA	; 250
    23b6:	b3 e4       	ldi	r27, 0x43	; 67
    23b8:	80 83       	st	Z, r24
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	a2 83       	std	Z+2, r26	; 0x02
    23be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c0:	8e 01       	movw	r16, r28
    23c2:	05 5a       	subi	r16, 0xA5	; 165
    23c4:	1f 4f       	sbci	r17, 0xFF	; 255
    23c6:	fe 01       	movw	r30, r28
    23c8:	e1 5a       	subi	r30, 0xA1	; 161
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	4a ef       	ldi	r20, 0xFA	; 250
    23da:	54 e4       	ldi	r21, 0x44	; 68
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	f8 01       	movw	r30, r16
    23e6:	80 83       	st	Z, r24
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	a2 83       	std	Z+2, r26	; 0x02
    23ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ee:	fe 01       	movw	r30, r28
    23f0:	e5 5a       	subi	r30, 0xA5	; 165
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	60 81       	ld	r22, Z
    23f6:	71 81       	ldd	r23, Z+1	; 0x01
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	93 81       	ldd	r25, Z+3	; 0x03
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e8       	ldi	r20, 0x80	; 128
    2402:	5f e3       	ldi	r21, 0x3F	; 63
    2404:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2408:	88 23       	and	r24, r24
    240a:	44 f4       	brge	.+16     	; 0x241c <LOGIN+0x478>
		__ticks = 1;
    240c:	fe 01       	movw	r30, r28
    240e:	e7 5a       	subi	r30, 0xA7	; 167
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	91 83       	std	Z+1, r25	; 0x01
    2418:	80 83       	st	Z, r24
    241a:	64 c0       	rjmp	.+200    	; 0x24e4 <LOGIN+0x540>
	else if (__tmp > 65535)
    241c:	fe 01       	movw	r30, r28
    241e:	e5 5a       	subi	r30, 0xA5	; 165
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	60 81       	ld	r22, Z
    2424:	71 81       	ldd	r23, Z+1	; 0x01
    2426:	82 81       	ldd	r24, Z+2	; 0x02
    2428:	93 81       	ldd	r25, Z+3	; 0x03
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	3f ef       	ldi	r19, 0xFF	; 255
    242e:	4f e7       	ldi	r20, 0x7F	; 127
    2430:	57 e4       	ldi	r21, 0x47	; 71
    2432:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2436:	18 16       	cp	r1, r24
    2438:	0c f0       	brlt	.+2      	; 0x243c <LOGIN+0x498>
    243a:	43 c0       	rjmp	.+134    	; 0x24c2 <LOGIN+0x51e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243c:	fe 01       	movw	r30, r28
    243e:	e1 5a       	subi	r30, 0xA1	; 161
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	60 81       	ld	r22, Z
    2444:	71 81       	ldd	r23, Z+1	; 0x01
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	93 81       	ldd	r25, Z+3	; 0x03
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e2       	ldi	r20, 0x20	; 32
    2450:	51 e4       	ldi	r21, 0x41	; 65
    2452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	8e 01       	movw	r16, r28
    245c:	07 5a       	subi	r16, 0xA7	; 167
    245e:	1f 4f       	sbci	r17, 0xFF	; 255
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	f8 01       	movw	r30, r16
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	80 83       	st	Z, r24
    2472:	1f c0       	rjmp	.+62     	; 0x24b2 <LOGIN+0x50e>
    2474:	fe 01       	movw	r30, r28
    2476:	e9 5a       	subi	r30, 0xA9	; 169
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	88 ec       	ldi	r24, 0xC8	; 200
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	91 83       	std	Z+1, r25	; 0x01
    2480:	80 83       	st	Z, r24
    2482:	fe 01       	movw	r30, r28
    2484:	e9 5a       	subi	r30, 0xA9	; 169
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	80 81       	ld	r24, Z
    248a:	91 81       	ldd	r25, Z+1	; 0x01
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <LOGIN+0x4e8>
    2490:	fe 01       	movw	r30, r28
    2492:	e9 5a       	subi	r30, 0xA9	; 169
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	91 83       	std	Z+1, r25	; 0x01
    2498:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249a:	de 01       	movw	r26, r28
    249c:	a7 5a       	subi	r26, 0xA7	; 167
    249e:	bf 4f       	sbci	r27, 0xFF	; 255
    24a0:	fe 01       	movw	r30, r28
    24a2:	e7 5a       	subi	r30, 0xA7	; 167
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	80 81       	ld	r24, Z
    24a8:	91 81       	ldd	r25, Z+1	; 0x01
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	11 96       	adiw	r26, 0x01	; 1
    24ae:	9c 93       	st	X, r25
    24b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b2:	fe 01       	movw	r30, r28
    24b4:	e7 5a       	subi	r30, 0xA7	; 167
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 81       	ld	r24, Z
    24ba:	91 81       	ldd	r25, Z+1	; 0x01
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	d1 f6       	brne	.-76     	; 0x2474 <LOGIN+0x4d0>
    24c0:	27 c0       	rjmp	.+78     	; 0x2510 <LOGIN+0x56c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c2:	8e 01       	movw	r16, r28
    24c4:	07 5a       	subi	r16, 0xA7	; 167
    24c6:	1f 4f       	sbci	r17, 0xFF	; 255
    24c8:	fe 01       	movw	r30, r28
    24ca:	e5 5a       	subi	r30, 0xA5	; 165
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	60 81       	ld	r22, Z
    24d0:	71 81       	ldd	r23, Z+1	; 0x01
    24d2:	82 81       	ldd	r24, Z+2	; 0x02
    24d4:	93 81       	ldd	r25, Z+3	; 0x03
    24d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	f8 01       	movw	r30, r16
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	80 83       	st	Z, r24
    24e4:	de 01       	movw	r26, r28
    24e6:	ab 5a       	subi	r26, 0xAB	; 171
    24e8:	bf 4f       	sbci	r27, 0xFF	; 255
    24ea:	fe 01       	movw	r30, r28
    24ec:	e7 5a       	subi	r30, 0xA7	; 167
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	80 81       	ld	r24, Z
    24f2:	91 81       	ldd	r25, Z+1	; 0x01
    24f4:	8d 93       	st	X+, r24
    24f6:	9c 93       	st	X, r25
    24f8:	fe 01       	movw	r30, r28
    24fa:	eb 5a       	subi	r30, 0xAB	; 171
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	80 81       	ld	r24, Z
    2500:	91 81       	ldd	r25, Z+1	; 0x01
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <LOGIN+0x55e>
    2506:	fe 01       	movw	r30, r28
    2508:	eb 5a       	subi	r30, 0xAB	; 171
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
	{
		_delay_ms(500);
	    CLCD_voidSendCommand(0b00000001);
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	    CLCD_voidSendString("Correct ID");
    2516:	82 e8       	ldi	r24, 0x82	; 130
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendString>
    251e:	fe 01       	movw	r30, r28
    2520:	ef 5a       	subi	r30, 0xAF	; 175
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	aa e7       	ldi	r26, 0x7A	; 122
    252a:	b4 e4       	ldi	r27, 0x44	; 68
    252c:	80 83       	st	Z, r24
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	a2 83       	std	Z+2, r26	; 0x02
    2532:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	8e 01       	movw	r16, r28
    2536:	03 5b       	subi	r16, 0xB3	; 179
    2538:	1f 4f       	sbci	r17, 0xFF	; 255
    253a:	fe 01       	movw	r30, r28
    253c:	ef 5a       	subi	r30, 0xAF	; 175
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	60 81       	ld	r22, Z
    2542:	71 81       	ldd	r23, Z+1	; 0x01
    2544:	82 81       	ldd	r24, Z+2	; 0x02
    2546:	93 81       	ldd	r25, Z+3	; 0x03
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	4a ef       	ldi	r20, 0xFA	; 250
    254e:	54 e4       	ldi	r21, 0x44	; 68
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	f8 01       	movw	r30, r16
    255a:	80 83       	st	Z, r24
    255c:	91 83       	std	Z+1, r25	; 0x01
    255e:	a2 83       	std	Z+2, r26	; 0x02
    2560:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2562:	fe 01       	movw	r30, r28
    2564:	e3 5b       	subi	r30, 0xB3	; 179
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	60 81       	ld	r22, Z
    256a:	71 81       	ldd	r23, Z+1	; 0x01
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	93 81       	ldd	r25, Z+3	; 0x03
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e8       	ldi	r20, 0x80	; 128
    2576:	5f e3       	ldi	r21, 0x3F	; 63
    2578:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    257c:	88 23       	and	r24, r24
    257e:	44 f4       	brge	.+16     	; 0x2590 <LOGIN+0x5ec>
		__ticks = 1;
    2580:	fe 01       	movw	r30, r28
    2582:	e5 5b       	subi	r30, 0xB5	; 181
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	80 83       	st	Z, r24
    258e:	64 c0       	rjmp	.+200    	; 0x2658 <LOGIN+0x6b4>
	else if (__tmp > 65535)
    2590:	fe 01       	movw	r30, r28
    2592:	e3 5b       	subi	r30, 0xB3	; 179
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	60 81       	ld	r22, Z
    2598:	71 81       	ldd	r23, Z+1	; 0x01
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	93 81       	ldd	r25, Z+3	; 0x03
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	3f ef       	ldi	r19, 0xFF	; 255
    25a2:	4f e7       	ldi	r20, 0x7F	; 127
    25a4:	57 e4       	ldi	r21, 0x47	; 71
    25a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25aa:	18 16       	cp	r1, r24
    25ac:	0c f0       	brlt	.+2      	; 0x25b0 <LOGIN+0x60c>
    25ae:	43 c0       	rjmp	.+134    	; 0x2636 <LOGIN+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b0:	fe 01       	movw	r30, r28
    25b2:	ef 5a       	subi	r30, 0xAF	; 175
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	60 81       	ld	r22, Z
    25b8:	71 81       	ldd	r23, Z+1	; 0x01
    25ba:	82 81       	ldd	r24, Z+2	; 0x02
    25bc:	93 81       	ldd	r25, Z+3	; 0x03
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e2       	ldi	r20, 0x20	; 32
    25c4:	51 e4       	ldi	r21, 0x41	; 65
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	8e 01       	movw	r16, r28
    25d0:	05 5b       	subi	r16, 0xB5	; 181
    25d2:	1f 4f       	sbci	r17, 0xFF	; 255
    25d4:	bc 01       	movw	r22, r24
    25d6:	cd 01       	movw	r24, r26
    25d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	f8 01       	movw	r30, r16
    25e2:	91 83       	std	Z+1, r25	; 0x01
    25e4:	80 83       	st	Z, r24
    25e6:	1f c0       	rjmp	.+62     	; 0x2626 <LOGIN+0x682>
    25e8:	fe 01       	movw	r30, r28
    25ea:	e7 5b       	subi	r30, 0xB7	; 183
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	88 ec       	ldi	r24, 0xC8	; 200
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	91 83       	std	Z+1, r25	; 0x01
    25f4:	80 83       	st	Z, r24
    25f6:	fe 01       	movw	r30, r28
    25f8:	e7 5b       	subi	r30, 0xB7	; 183
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	80 81       	ld	r24, Z
    25fe:	91 81       	ldd	r25, Z+1	; 0x01
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LOGIN+0x65c>
    2604:	fe 01       	movw	r30, r28
    2606:	e7 5b       	subi	r30, 0xB7	; 183
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260e:	de 01       	movw	r26, r28
    2610:	a5 5b       	subi	r26, 0xB5	; 181
    2612:	bf 4f       	sbci	r27, 0xFF	; 255
    2614:	fe 01       	movw	r30, r28
    2616:	e5 5b       	subi	r30, 0xB5	; 181
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	80 81       	ld	r24, Z
    261c:	91 81       	ldd	r25, Z+1	; 0x01
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	11 96       	adiw	r26, 0x01	; 1
    2622:	9c 93       	st	X, r25
    2624:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2626:	fe 01       	movw	r30, r28
    2628:	e5 5b       	subi	r30, 0xB5	; 181
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	80 81       	ld	r24, Z
    262e:	91 81       	ldd	r25, Z+1	; 0x01
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	d1 f6       	brne	.-76     	; 0x25e8 <LOGIN+0x644>
    2634:	27 c0       	rjmp	.+78     	; 0x2684 <LOGIN+0x6e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2636:	8e 01       	movw	r16, r28
    2638:	05 5b       	subi	r16, 0xB5	; 181
    263a:	1f 4f       	sbci	r17, 0xFF	; 255
    263c:	fe 01       	movw	r30, r28
    263e:	e3 5b       	subi	r30, 0xB3	; 179
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	60 81       	ld	r22, Z
    2644:	71 81       	ldd	r23, Z+1	; 0x01
    2646:	82 81       	ldd	r24, Z+2	; 0x02
    2648:	93 81       	ldd	r25, Z+3	; 0x03
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	f8 01       	movw	r30, r16
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24
    2658:	de 01       	movw	r26, r28
    265a:	a9 5b       	subi	r26, 0xB9	; 185
    265c:	bf 4f       	sbci	r27, 0xFF	; 255
    265e:	fe 01       	movw	r30, r28
    2660:	e5 5b       	subi	r30, 0xB5	; 181
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	80 81       	ld	r24, Z
    2666:	91 81       	ldd	r25, Z+1	; 0x01
    2668:	8d 93       	st	X+, r24
    266a:	9c 93       	st	X, r25
    266c:	fe 01       	movw	r30, r28
    266e:	e9 5b       	subi	r30, 0xB9	; 185
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	80 81       	ld	r24, Z
    2674:	91 81       	ldd	r25, Z+1	; 0x01
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <LOGIN+0x6d2>
    267a:	fe 01       	movw	r30, r28
    267c:	e9 5b       	subi	r30, 0xB9	; 185
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	91 83       	std	Z+1, r25	; 0x01
    2682:	80 83       	st	Z, r24
	    _delay_ms(1000);
	    CLCD_voidSendCommand(0b00000001);
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    268a:	fe 01       	movw	r30, r28
    268c:	ed 5b       	subi	r30, 0xBD	; 189
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	aa ef       	ldi	r26, 0xFA	; 250
    2696:	b3 e4       	ldi	r27, 0x43	; 67
    2698:	80 83       	st	Z, r24
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	a2 83       	std	Z+2, r26	; 0x02
    269e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a0:	8e 01       	movw	r16, r28
    26a2:	01 5c       	subi	r16, 0xC1	; 193
    26a4:	1f 4f       	sbci	r17, 0xFF	; 255
    26a6:	fe 01       	movw	r30, r28
    26a8:	ed 5b       	subi	r30, 0xBD	; 189
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	60 81       	ld	r22, Z
    26ae:	71 81       	ldd	r23, Z+1	; 0x01
    26b0:	82 81       	ldd	r24, Z+2	; 0x02
    26b2:	93 81       	ldd	r25, Z+3	; 0x03
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	4a ef       	ldi	r20, 0xFA	; 250
    26ba:	54 e4       	ldi	r21, 0x44	; 68
    26bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	f8 01       	movw	r30, r16
    26c6:	80 83       	st	Z, r24
    26c8:	91 83       	std	Z+1, r25	; 0x01
    26ca:	a2 83       	std	Z+2, r26	; 0x02
    26cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ce:	fe 01       	movw	r30, r28
    26d0:	ff 96       	adiw	r30, 0x3f	; 63
    26d2:	60 81       	ld	r22, Z
    26d4:	71 81       	ldd	r23, Z+1	; 0x01
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e8       	ldi	r20, 0x80	; 128
    26e0:	5f e3       	ldi	r21, 0x3F	; 63
    26e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26e6:	88 23       	and	r24, r24
    26e8:	2c f4       	brge	.+10     	; 0x26f4 <LOGIN+0x750>
		__ticks = 1;
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	9e af       	std	Y+62, r25	; 0x3e
    26f0:	8d af       	std	Y+61, r24	; 0x3d
    26f2:	46 c0       	rjmp	.+140    	; 0x2780 <LOGIN+0x7dc>
	else if (__tmp > 65535)
    26f4:	fe 01       	movw	r30, r28
    26f6:	ff 96       	adiw	r30, 0x3f	; 63
    26f8:	60 81       	ld	r22, Z
    26fa:	71 81       	ldd	r23, Z+1	; 0x01
    26fc:	82 81       	ldd	r24, Z+2	; 0x02
    26fe:	93 81       	ldd	r25, Z+3	; 0x03
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	3f ef       	ldi	r19, 0xFF	; 255
    2704:	4f e7       	ldi	r20, 0x7F	; 127
    2706:	57 e4       	ldi	r21, 0x47	; 71
    2708:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    270c:	18 16       	cp	r1, r24
    270e:	64 f5       	brge	.+88     	; 0x2768 <LOGIN+0x7c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2710:	fe 01       	movw	r30, r28
    2712:	ed 5b       	subi	r30, 0xBD	; 189
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	60 81       	ld	r22, Z
    2718:	71 81       	ldd	r23, Z+1	; 0x01
    271a:	82 81       	ldd	r24, Z+2	; 0x02
    271c:	93 81       	ldd	r25, Z+3	; 0x03
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e2       	ldi	r20, 0x20	; 32
    2724:	51 e4       	ldi	r21, 0x41	; 65
    2726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	bc 01       	movw	r22, r24
    2730:	cd 01       	movw	r24, r26
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9e af       	std	Y+62, r25	; 0x3e
    273c:	8d af       	std	Y+61, r24	; 0x3d
    273e:	0f c0       	rjmp	.+30     	; 0x275e <LOGIN+0x7ba>
    2740:	88 ec       	ldi	r24, 0xC8	; 200
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9c af       	std	Y+60, r25	; 0x3c
    2746:	8b af       	std	Y+59, r24	; 0x3b
    2748:	8b ad       	ldd	r24, Y+59	; 0x3b
    274a:	9c ad       	ldd	r25, Y+60	; 0x3c
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	f1 f7       	brne	.-4      	; 0x274c <LOGIN+0x7a8>
    2750:	9c af       	std	Y+60, r25	; 0x3c
    2752:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2754:	8d ad       	ldd	r24, Y+61	; 0x3d
    2756:	9e ad       	ldd	r25, Y+62	; 0x3e
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	9e af       	std	Y+62, r25	; 0x3e
    275c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2760:	9e ad       	ldd	r25, Y+62	; 0x3e
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	69 f7       	brne	.-38     	; 0x2740 <LOGIN+0x79c>
    2766:	16 c0       	rjmp	.+44     	; 0x2794 <LOGIN+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2768:	fe 01       	movw	r30, r28
    276a:	ff 96       	adiw	r30, 0x3f	; 63
    276c:	60 81       	ld	r22, Z
    276e:	71 81       	ldd	r23, Z+1	; 0x01
    2770:	82 81       	ldd	r24, Z+2	; 0x02
    2772:	93 81       	ldd	r25, Z+3	; 0x03
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e af       	std	Y+62, r25	; 0x3e
    277e:	8d af       	std	Y+61, r24	; 0x3d
    2780:	8d ad       	ldd	r24, Y+61	; 0x3d
    2782:	9e ad       	ldd	r25, Y+62	; 0x3e
    2784:	9a af       	std	Y+58, r25	; 0x3a
    2786:	89 af       	std	Y+57, r24	; 0x39
    2788:	89 ad       	ldd	r24, Y+57	; 0x39
    278a:	9a ad       	ldd	r25, Y+58	; 0x3a
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <LOGIN+0x7e8>
    2790:	9a af       	std	Y+58, r25	; 0x3a
    2792:	89 af       	std	Y+57, r24	; 0x39
	    _delay_ms(500);

	    /* Check for Password with 3 trials */

	    for(Local_u8SSD_Itterator=3;Local_u8SSD_Itterator>0;Local_u8SSD_Itterator--)
    2794:	fe 01       	movw	r30, r28
    2796:	e1 58       	subi	r30, 0x81	; 129
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	83 e0       	ldi	r24, 0x03	; 3
    279c:	80 83       	st	Z, r24
    279e:	64 c2       	rjmp	.+1224   	; 0x2c68 <LOGIN+0xcc4>
	    {
	    	SSD_voidOn(&obj);
    27a0:	ce 01       	movw	r24, r28
    27a2:	88 57       	subi	r24, 0x78	; 120
    27a4:	9f 4f       	sbci	r25, 0xFF	; 255
    27a6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <SSD_voidOn>
	    	SSD_voidSendNumber(&obj,Local_u8SSD_Itterator);
    27aa:	ce 01       	movw	r24, r28
    27ac:	88 57       	subi	r24, 0x78	; 120
    27ae:	9f 4f       	sbci	r25, 0xFF	; 255
    27b0:	fe 01       	movw	r30, r28
    27b2:	e1 58       	subi	r30, 0x81	; 129
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	60 81       	ld	r22, Z
    27b8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <SSD_voidSendNumber>
	    	CLCD_voidSendString("Enter Pass: ");
    27bc:	8d e8       	ldi	r24, 0x8D	; 141
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendString>
	    	for (Local_u8Itterator=0;Local_u8Itterator<3;Local_u8Itterator++)
    27c4:	fe 01       	movw	r30, r28
    27c6:	e0 58       	subi	r30, 0x80	; 128
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	10 82       	st	Z, r1
    27cc:	39 c0       	rjmp	.+114    	; 0x2840 <LOGIN+0x89c>
	    	{
	    		Local_u8ValuePressed = KPD_u8GetPressedKey();
    27ce:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <KPD_u8GetPressedKey>
    27d2:	fe 01       	movw	r30, r28
    27d4:	ef 57       	subi	r30, 0x7F	; 127
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	80 83       	st	Z, r24
    27da:	06 c0       	rjmp	.+12     	; 0x27e8 <LOGIN+0x844>
	    		while(Local_u8ValuePressed == 255)
	    		{
	    			Local_u8ValuePressed = KPD_u8GetPressedKey();
    27dc:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <KPD_u8GetPressedKey>
    27e0:	fe 01       	movw	r30, r28
    27e2:	ef 57       	subi	r30, 0x7F	; 127
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	80 83       	st	Z, r24
	    	SSD_voidSendNumber(&obj,Local_u8SSD_Itterator);
	    	CLCD_voidSendString("Enter Pass: ");
	    	for (Local_u8Itterator=0;Local_u8Itterator<3;Local_u8Itterator++)
	    	{
	    		Local_u8ValuePressed = KPD_u8GetPressedKey();
	    		while(Local_u8ValuePressed == 255)
    27e8:	fe 01       	movw	r30, r28
    27ea:	ef 57       	subi	r30, 0x7F	; 127
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 81       	ld	r24, Z
    27f0:	8f 3f       	cpi	r24, 0xFF	; 255
    27f2:	a1 f3       	breq	.-24     	; 0x27dc <LOGIN+0x838>
	    		{
	    			Local_u8ValuePressed = KPD_u8GetPressedKey();
	    		}
	    		Password_Arr[Local_u8Itterator] = Local_u8ValuePressed;
    27f4:	fe 01       	movw	r30, r28
    27f6:	e0 58       	subi	r30, 0x80	; 128
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	80 81       	ld	r24, Z
    27fc:	28 2f       	mov	r18, r24
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	ce 01       	movw	r24, r28
    2802:	8b 57       	subi	r24, 0x7B	; 123
    2804:	9f 4f       	sbci	r25, 0xFF	; 255
    2806:	dc 01       	movw	r26, r24
    2808:	a2 0f       	add	r26, r18
    280a:	b3 1f       	adc	r27, r19
    280c:	fe 01       	movw	r30, r28
    280e:	ef 57       	subi	r30, 0x7F	; 127
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	8c 93       	st	X, r24
	    	    CLCD_voidSendNumber(Local_u8ValuePressed);
    2816:	fe 01       	movw	r30, r28
    2818:	ef 57       	subi	r30, 0x7F	; 127
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	80 81       	ld	r24, Z
    281e:	88 2f       	mov	r24, r24
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	a0 e0       	ldi	r26, 0x00	; 0
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	bc 01       	movw	r22, r24
    2828:	cd 01       	movw	r24, r26
    282a:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_voidSendNumber>
	    for(Local_u8SSD_Itterator=3;Local_u8SSD_Itterator>0;Local_u8SSD_Itterator--)
	    {
	    	SSD_voidOn(&obj);
	    	SSD_voidSendNumber(&obj,Local_u8SSD_Itterator);
	    	CLCD_voidSendString("Enter Pass: ");
	    	for (Local_u8Itterator=0;Local_u8Itterator<3;Local_u8Itterator++)
    282e:	de 01       	movw	r26, r28
    2830:	a0 58       	subi	r26, 0x80	; 128
    2832:	bf 4f       	sbci	r27, 0xFF	; 255
    2834:	fe 01       	movw	r30, r28
    2836:	e0 58       	subi	r30, 0x80	; 128
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 81       	ld	r24, Z
    283c:	8f 5f       	subi	r24, 0xFF	; 255
    283e:	8c 93       	st	X, r24
    2840:	fe 01       	movw	r30, r28
    2842:	e0 58       	subi	r30, 0x80	; 128
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	80 81       	ld	r24, Z
    2848:	83 30       	cpi	r24, 0x03	; 3
    284a:	08 f2       	brcs	.-126    	; 0x27ce <LOGIN+0x82a>
	    		}
	    		Password_Arr[Local_u8Itterator] = Local_u8ValuePressed;
	    	    CLCD_voidSendNumber(Local_u8ValuePressed);
	    	}

	    	if ((Password_Arr[0]==3) && (Password_Arr[1]==2) && (Password_Arr[2]==1))  /*Password CORRECT*/
    284c:	fe 01       	movw	r30, r28
    284e:	eb 57       	subi	r30, 0x7B	; 123
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	80 81       	ld	r24, Z
    2854:	83 30       	cpi	r24, 0x03	; 3
    2856:	09 f0       	breq	.+2      	; 0x285a <LOGIN+0x8b6>
    2858:	fd c0       	rjmp	.+506    	; 0x2a54 <LOGIN+0xab0>
    285a:	fe 01       	movw	r30, r28
    285c:	eb 57       	subi	r30, 0x7B	; 123
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	81 81       	ldd	r24, Z+1	; 0x01
    2862:	82 30       	cpi	r24, 0x02	; 2
    2864:	09 f0       	breq	.+2      	; 0x2868 <LOGIN+0x8c4>
    2866:	f6 c0       	rjmp	.+492    	; 0x2a54 <LOGIN+0xab0>
    2868:	fe 01       	movw	r30, r28
    286a:	eb 57       	subi	r30, 0x7B	; 123
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	82 81       	ldd	r24, Z+2	; 0x02
    2870:	81 30       	cpi	r24, 0x01	; 1
    2872:	09 f0       	breq	.+2      	; 0x2876 <LOGIN+0x8d2>
    2874:	ef c0       	rjmp	.+478    	; 0x2a54 <LOGIN+0xab0>
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	aa ef       	ldi	r26, 0xFA	; 250
    287c:	b3 e4       	ldi	r27, 0x43	; 67
    287e:	8d ab       	std	Y+53, r24	; 0x35
    2880:	9e ab       	std	Y+54, r25	; 0x36
    2882:	af ab       	std	Y+55, r26	; 0x37
    2884:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2886:	6d a9       	ldd	r22, Y+53	; 0x35
    2888:	7e a9       	ldd	r23, Y+54	; 0x36
    288a:	8f a9       	ldd	r24, Y+55	; 0x37
    288c:	98 ad       	ldd	r25, Y+56	; 0x38
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4a ef       	ldi	r20, 0xFA	; 250
    2894:	54 e4       	ldi	r21, 0x44	; 68
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	89 ab       	std	Y+49, r24	; 0x31
    28a0:	9a ab       	std	Y+50, r25	; 0x32
    28a2:	ab ab       	std	Y+51, r26	; 0x33
    28a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28a6:	69 a9       	ldd	r22, Y+49	; 0x31
    28a8:	7a a9       	ldd	r23, Y+50	; 0x32
    28aa:	8b a9       	ldd	r24, Y+51	; 0x33
    28ac:	9c a9       	ldd	r25, Y+52	; 0x34
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e8       	ldi	r20, 0x80	; 128
    28b4:	5f e3       	ldi	r21, 0x3F	; 63
    28b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ba:	88 23       	and	r24, r24
    28bc:	2c f4       	brge	.+10     	; 0x28c8 <LOGIN+0x924>
		__ticks = 1;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	98 ab       	std	Y+48, r25	; 0x30
    28c4:	8f a7       	std	Y+47, r24	; 0x2f
    28c6:	3f c0       	rjmp	.+126    	; 0x2946 <LOGIN+0x9a2>
	else if (__tmp > 65535)
    28c8:	69 a9       	ldd	r22, Y+49	; 0x31
    28ca:	7a a9       	ldd	r23, Y+50	; 0x32
    28cc:	8b a9       	ldd	r24, Y+51	; 0x33
    28ce:	9c a9       	ldd	r25, Y+52	; 0x34
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	3f ef       	ldi	r19, 0xFF	; 255
    28d4:	4f e7       	ldi	r20, 0x7F	; 127
    28d6:	57 e4       	ldi	r21, 0x47	; 71
    28d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28dc:	18 16       	cp	r1, r24
    28de:	4c f5       	brge	.+82     	; 0x2932 <LOGIN+0x98e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e0:	6d a9       	ldd	r22, Y+53	; 0x35
    28e2:	7e a9       	ldd	r23, Y+54	; 0x36
    28e4:	8f a9       	ldd	r24, Y+55	; 0x37
    28e6:	98 ad       	ldd	r25, Y+56	; 0x38
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e2       	ldi	r20, 0x20	; 32
    28ee:	51 e4       	ldi	r21, 0x41	; 65
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	98 ab       	std	Y+48, r25	; 0x30
    2906:	8f a7       	std	Y+47, r24	; 0x2f
    2908:	0f c0       	rjmp	.+30     	; 0x2928 <LOGIN+0x984>
    290a:	88 ec       	ldi	r24, 0xC8	; 200
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9e a7       	std	Y+46, r25	; 0x2e
    2910:	8d a7       	std	Y+45, r24	; 0x2d
    2912:	8d a5       	ldd	r24, Y+45	; 0x2d
    2914:	9e a5       	ldd	r25, Y+46	; 0x2e
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <LOGIN+0x972>
    291a:	9e a7       	std	Y+46, r25	; 0x2e
    291c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2920:	98 a9       	ldd	r25, Y+48	; 0x30
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	98 ab       	std	Y+48, r25	; 0x30
    2926:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2928:	8f a5       	ldd	r24, Y+47	; 0x2f
    292a:	98 a9       	ldd	r25, Y+48	; 0x30
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	69 f7       	brne	.-38     	; 0x290a <LOGIN+0x966>
    2930:	14 c0       	rjmp	.+40     	; 0x295a <LOGIN+0x9b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2932:	69 a9       	ldd	r22, Y+49	; 0x31
    2934:	7a a9       	ldd	r23, Y+50	; 0x32
    2936:	8b a9       	ldd	r24, Y+51	; 0x33
    2938:	9c a9       	ldd	r25, Y+52	; 0x34
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	98 ab       	std	Y+48, r25	; 0x30
    2944:	8f a7       	std	Y+47, r24	; 0x2f
    2946:	8f a5       	ldd	r24, Y+47	; 0x2f
    2948:	98 a9       	ldd	r25, Y+48	; 0x30
    294a:	9c a7       	std	Y+44, r25	; 0x2c
    294c:	8b a7       	std	Y+43, r24	; 0x2b
    294e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2950:	9c a5       	ldd	r25, Y+44	; 0x2c
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <LOGIN+0x9ae>
    2956:	9c a7       	std	Y+44, r25	; 0x2c
    2958:	8b a7       	std	Y+43, r24	; 0x2b
	    	{
	    		_delay_ms(500);
	    		CLCD_voidSendCommand(0b00000001);
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	    		CLCD_voidSendString("Correct Password");
    2960:	8a e9       	ldi	r24, 0x9A	; 154
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendString>
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	aa e7       	ldi	r26, 0x7A	; 122
    296e:	b4 e4       	ldi	r27, 0x44	; 68
    2970:	8f a3       	std	Y+39, r24	; 0x27
    2972:	98 a7       	std	Y+40, r25	; 0x28
    2974:	a9 a7       	std	Y+41, r26	; 0x29
    2976:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2978:	6f a1       	ldd	r22, Y+39	; 0x27
    297a:	78 a5       	ldd	r23, Y+40	; 0x28
    297c:	89 a5       	ldd	r24, Y+41	; 0x29
    297e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	4a ef       	ldi	r20, 0xFA	; 250
    2986:	54 e4       	ldi	r21, 0x44	; 68
    2988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	8b a3       	std	Y+35, r24	; 0x23
    2992:	9c a3       	std	Y+36, r25	; 0x24
    2994:	ad a3       	std	Y+37, r26	; 0x25
    2996:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2998:	6b a1       	ldd	r22, Y+35	; 0x23
    299a:	7c a1       	ldd	r23, Y+36	; 0x24
    299c:	8d a1       	ldd	r24, Y+37	; 0x25
    299e:	9e a1       	ldd	r25, Y+38	; 0x26
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e8       	ldi	r20, 0x80	; 128
    29a6:	5f e3       	ldi	r21, 0x3F	; 63
    29a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ac:	88 23       	and	r24, r24
    29ae:	2c f4       	brge	.+10     	; 0x29ba <LOGIN+0xa16>
		__ticks = 1;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	9a a3       	std	Y+34, r25	; 0x22
    29b6:	89 a3       	std	Y+33, r24	; 0x21
    29b8:	3f c0       	rjmp	.+126    	; 0x2a38 <LOGIN+0xa94>
	else if (__tmp > 65535)
    29ba:	6b a1       	ldd	r22, Y+35	; 0x23
    29bc:	7c a1       	ldd	r23, Y+36	; 0x24
    29be:	8d a1       	ldd	r24, Y+37	; 0x25
    29c0:	9e a1       	ldd	r25, Y+38	; 0x26
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	3f ef       	ldi	r19, 0xFF	; 255
    29c6:	4f e7       	ldi	r20, 0x7F	; 127
    29c8:	57 e4       	ldi	r21, 0x47	; 71
    29ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ce:	18 16       	cp	r1, r24
    29d0:	4c f5       	brge	.+82     	; 0x2a24 <LOGIN+0xa80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d2:	6f a1       	ldd	r22, Y+39	; 0x27
    29d4:	78 a5       	ldd	r23, Y+40	; 0x28
    29d6:	89 a5       	ldd	r24, Y+41	; 0x29
    29d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	40 e2       	ldi	r20, 0x20	; 32
    29e0:	51 e4       	ldi	r21, 0x41	; 65
    29e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	bc 01       	movw	r22, r24
    29ec:	cd 01       	movw	r24, r26
    29ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	9a a3       	std	Y+34, r25	; 0x22
    29f8:	89 a3       	std	Y+33, r24	; 0x21
    29fa:	0f c0       	rjmp	.+30     	; 0x2a1a <LOGIN+0xa76>
    29fc:	88 ec       	ldi	r24, 0xC8	; 200
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	98 a3       	std	Y+32, r25	; 0x20
    2a02:	8f 8f       	std	Y+31, r24	; 0x1f
    2a04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a06:	98 a1       	ldd	r25, Y+32	; 0x20
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	f1 f7       	brne	.-4      	; 0x2a08 <LOGIN+0xa64>
    2a0c:	98 a3       	std	Y+32, r25	; 0x20
    2a0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a10:	89 a1       	ldd	r24, Y+33	; 0x21
    2a12:	9a a1       	ldd	r25, Y+34	; 0x22
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	9a a3       	std	Y+34, r25	; 0x22
    2a18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1e:	00 97       	sbiw	r24, 0x00	; 0
    2a20:	69 f7       	brne	.-38     	; 0x29fc <LOGIN+0xa58>
    2a22:	14 c0       	rjmp	.+40     	; 0x2a4c <LOGIN+0xaa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a24:	6b a1       	ldd	r22, Y+35	; 0x23
    2a26:	7c a1       	ldd	r23, Y+36	; 0x24
    2a28:	8d a1       	ldd	r24, Y+37	; 0x25
    2a2a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	9a a3       	std	Y+34, r25	; 0x22
    2a36:	89 a3       	std	Y+33, r24	; 0x21
    2a38:	89 a1       	ldd	r24, Y+33	; 0x21
    2a3a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a3c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a3e:	8d 8f       	std	Y+29, r24	; 0x1d
    2a40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <LOGIN+0xaa0>
    2a48:	9e 8f       	std	Y+30, r25	; 0x1e
    2a4a:	8d 8f       	std	Y+29, r24	; 0x1d
	    		_delay_ms(1000);
	    		CLCD_voidSendCommand(0b00000001);
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    2a52:	11 c1       	rjmp	.+546    	; 0x2c76 <LOGIN+0xcd2>
	    		break;
	    	}

	    	if ((Password_Arr[0]!=3) || (Password_Arr[1]!=2) || (Password_Arr[2]!=1))  /*Password INCORRECT*/
    2a54:	fe 01       	movw	r30, r28
    2a56:	eb 57       	subi	r30, 0x7B	; 123
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 81       	ld	r24, Z
    2a5c:	83 30       	cpi	r24, 0x03	; 3
    2a5e:	69 f4       	brne	.+26     	; 0x2a7a <LOGIN+0xad6>
    2a60:	fe 01       	movw	r30, r28
    2a62:	eb 57       	subi	r30, 0x7B	; 123
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	81 81       	ldd	r24, Z+1	; 0x01
    2a68:	82 30       	cpi	r24, 0x02	; 2
    2a6a:	39 f4       	brne	.+14     	; 0x2a7a <LOGIN+0xad6>
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	eb 57       	subi	r30, 0x7B	; 123
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	82 81       	ldd	r24, Z+2	; 0x02
    2a74:	81 30       	cpi	r24, 0x01	; 1
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <LOGIN+0xad6>
    2a78:	ee c0       	rjmp	.+476    	; 0x2c56 <LOGIN+0xcb2>
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	aa ef       	ldi	r26, 0xFA	; 250
    2a80:	b3 e4       	ldi	r27, 0x43	; 67
    2a82:	89 8f       	std	Y+25, r24	; 0x19
    2a84:	9a 8f       	std	Y+26, r25	; 0x1a
    2a86:	ab 8f       	std	Y+27, r26	; 0x1b
    2a88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	4a ef       	ldi	r20, 0xFA	; 250
    2a98:	54 e4       	ldi	r21, 0x44	; 68
    2a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	8d 8b       	std	Y+21, r24	; 0x15
    2aa4:	9e 8b       	std	Y+22, r25	; 0x16
    2aa6:	af 8b       	std	Y+23, r26	; 0x17
    2aa8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2aac:	7e 89       	ldd	r23, Y+22	; 0x16
    2aae:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	5f e3       	ldi	r21, 0x3F	; 63
    2aba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2abe:	88 23       	and	r24, r24
    2ac0:	2c f4       	brge	.+10     	; 0x2acc <LOGIN+0xb28>
		__ticks = 1;
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	9c 8b       	std	Y+20, r25	; 0x14
    2ac8:	8b 8b       	std	Y+19, r24	; 0x13
    2aca:	3f c0       	rjmp	.+126    	; 0x2b4a <LOGIN+0xba6>
	else if (__tmp > 65535)
    2acc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ace:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	3f ef       	ldi	r19, 0xFF	; 255
    2ad8:	4f e7       	ldi	r20, 0x7F	; 127
    2ada:	57 e4       	ldi	r21, 0x47	; 71
    2adc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae0:	18 16       	cp	r1, r24
    2ae2:	4c f5       	brge	.+82     	; 0x2b36 <LOGIN+0xb92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e2       	ldi	r20, 0x20	; 32
    2af2:	51 e4       	ldi	r21, 0x41	; 65
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	9c 8b       	std	Y+20, r25	; 0x14
    2b0a:	8b 8b       	std	Y+19, r24	; 0x13
    2b0c:	0f c0       	rjmp	.+30     	; 0x2b2c <LOGIN+0xb88>
    2b0e:	88 ec       	ldi	r24, 0xC8	; 200
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	9a 8b       	std	Y+18, r25	; 0x12
    2b14:	89 8b       	std	Y+17, r24	; 0x11
    2b16:	89 89       	ldd	r24, Y+17	; 0x11
    2b18:	9a 89       	ldd	r25, Y+18	; 0x12
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <LOGIN+0xb76>
    2b1e:	9a 8b       	std	Y+18, r25	; 0x12
    2b20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b22:	8b 89       	ldd	r24, Y+19	; 0x13
    2b24:	9c 89       	ldd	r25, Y+20	; 0x14
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	9c 8b       	std	Y+20, r25	; 0x14
    2b2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	69 f7       	brne	.-38     	; 0x2b0e <LOGIN+0xb6a>
    2b34:	14 c0       	rjmp	.+40     	; 0x2b5e <LOGIN+0xbba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b36:	6d 89       	ldd	r22, Y+21	; 0x15
    2b38:	7e 89       	ldd	r23, Y+22	; 0x16
    2b3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	9c 8b       	std	Y+20, r25	; 0x14
    2b48:	8b 8b       	std	Y+19, r24	; 0x13
    2b4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b4e:	98 8b       	std	Y+16, r25	; 0x10
    2b50:	8f 87       	std	Y+15, r24	; 0x0f
    2b52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b54:	98 89       	ldd	r25, Y+16	; 0x10
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <LOGIN+0xbb2>
    2b5a:	98 8b       	std	Y+16, r25	; 0x10
    2b5c:	8f 87       	std	Y+15, r24	; 0x0f
	    	{
	    		_delay_ms(500);
	    		CLCD_voidSendCommand(0b00000001);
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	    		CLCD_voidSendString("Wrong Password");
    2b64:	8b ea       	ldi	r24, 0xAB	; 171
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendString>
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	aa e7       	ldi	r26, 0x7A	; 122
    2b72:	b4 e4       	ldi	r27, 0x44	; 68
    2b74:	8b 87       	std	Y+11, r24	; 0x0b
    2b76:	9c 87       	std	Y+12, r25	; 0x0c
    2b78:	ad 87       	std	Y+13, r26	; 0x0d
    2b7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	4a ef       	ldi	r20, 0xFA	; 250
    2b8a:	54 e4       	ldi	r21, 0x44	; 68
    2b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	8f 83       	std	Y+7, r24	; 0x07
    2b96:	98 87       	std	Y+8, r25	; 0x08
    2b98:	a9 87       	std	Y+9, r26	; 0x09
    2b9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ba0:	89 85       	ldd	r24, Y+9	; 0x09
    2ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e8       	ldi	r20, 0x80	; 128
    2baa:	5f e3       	ldi	r21, 0x3F	; 63
    2bac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bb0:	88 23       	and	r24, r24
    2bb2:	2c f4       	brge	.+10     	; 0x2bbe <LOGIN+0xc1a>
		__ticks = 1;
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	9e 83       	std	Y+6, r25	; 0x06
    2bba:	8d 83       	std	Y+5, r24	; 0x05
    2bbc:	3f c0       	rjmp	.+126    	; 0x2c3c <LOGIN+0xc98>
	else if (__tmp > 65535)
    2bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc0:	78 85       	ldd	r23, Y+8	; 0x08
    2bc2:	89 85       	ldd	r24, Y+9	; 0x09
    2bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	3f ef       	ldi	r19, 0xFF	; 255
    2bca:	4f e7       	ldi	r20, 0x7F	; 127
    2bcc:	57 e4       	ldi	r21, 0x47	; 71
    2bce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bd2:	18 16       	cp	r1, r24
    2bd4:	4c f5       	brge	.+82     	; 0x2c28 <LOGIN+0xc84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e2       	ldi	r20, 0x20	; 32
    2be4:	51 e4       	ldi	r21, 0x41	; 65
    2be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	bc 01       	movw	r22, r24
    2bf0:	cd 01       	movw	r24, r26
    2bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	9e 83       	std	Y+6, r25	; 0x06
    2bfc:	8d 83       	std	Y+5, r24	; 0x05
    2bfe:	0f c0       	rjmp	.+30     	; 0x2c1e <LOGIN+0xc7a>
    2c00:	88 ec       	ldi	r24, 0xC8	; 200
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	9c 83       	std	Y+4, r25	; 0x04
    2c06:	8b 83       	std	Y+3, r24	; 0x03
    2c08:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	f1 f7       	brne	.-4      	; 0x2c0c <LOGIN+0xc68>
    2c10:	9c 83       	std	Y+4, r25	; 0x04
    2c12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c14:	8d 81       	ldd	r24, Y+5	; 0x05
    2c16:	9e 81       	ldd	r25, Y+6	; 0x06
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	9e 83       	std	Y+6, r25	; 0x06
    2c1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c20:	9e 81       	ldd	r25, Y+6	; 0x06
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	69 f7       	brne	.-38     	; 0x2c00 <LOGIN+0xc5c>
    2c26:	14 c0       	rjmp	.+40     	; 0x2c50 <LOGIN+0xcac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c28:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2a:	78 85       	ldd	r23, Y+8	; 0x08
    2c2c:	89 85       	ldd	r24, Y+9	; 0x09
    2c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	9e 83       	std	Y+6, r25	; 0x06
    2c3a:	8d 83       	std	Y+5, r24	; 0x05
    2c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c40:	9a 83       	std	Y+2, r25	; 0x02
    2c42:	89 83       	std	Y+1, r24	; 0x01
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	9a 81       	ldd	r25, Y+2	; 0x02
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <LOGIN+0xca4>
    2c4c:	9a 83       	std	Y+2, r25	; 0x02
    2c4e:	89 83       	std	Y+1, r24	; 0x01
	    		_delay_ms(1000);
	    		CLCD_voidSendCommand(0b00000001);
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	    CLCD_voidSendCommand(0b00000001);
	    _delay_ms(500);

	    /* Check for Password with 3 trials */

	    for(Local_u8SSD_Itterator=3;Local_u8SSD_Itterator>0;Local_u8SSD_Itterator--)
    2c56:	de 01       	movw	r26, r28
    2c58:	a1 58       	subi	r26, 0x81	; 129
    2c5a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	e1 58       	subi	r30, 0x81	; 129
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	80 81       	ld	r24, Z
    2c64:	81 50       	subi	r24, 0x01	; 1
    2c66:	8c 93       	st	X, r24
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e1 58       	subi	r30, 0x81	; 129
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	80 81       	ld	r24, Z
    2c70:	88 23       	and	r24, r24
    2c72:	09 f0       	breq	.+2      	; 0x2c76 <LOGIN+0xcd2>
    2c74:	95 cd       	rjmp	.-1238   	; 0x27a0 <LOGIN+0x7fc>
	    		_delay_ms(1000);
	    		CLCD_voidSendCommand(0b00000001);
	    	}
	    }

	    SSD_voidOff(&obj);
    2c76:	ce 01       	movw	r24, r28
    2c78:	88 57       	subi	r24, 0x78	; 120
    2c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <SSD_voidOff>
        flag = 3;
    2c80:	83 e0       	ldi	r24, 0x03	; 3
    2c82:	80 93 ec 00 	sts	0x00EC, r24
	}
}
    2c86:	c5 57       	subi	r28, 0x75	; 117
    2c88:	df 4f       	sbci	r29, 0xFF	; 255
    2c8a:	0f b6       	in	r0, 0x3f	; 63
    2c8c:	f8 94       	cli
    2c8e:	de bf       	out	0x3e, r29	; 62
    2c90:	0f be       	out	0x3f, r0	; 63
    2c92:	cd bf       	out	0x3d, r28	; 61
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	1f 91       	pop	r17
    2c9a:	0f 91       	pop	r16
    2c9c:	08 95       	ret

00002c9e <SHUTDOWN>:

void SHUTDOWN(void)
{
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(0b00000001);
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <__mulsi3>:
    2cb2:	62 9f       	mul	r22, r18
    2cb4:	d0 01       	movw	r26, r0
    2cb6:	73 9f       	mul	r23, r19
    2cb8:	f0 01       	movw	r30, r0
    2cba:	82 9f       	mul	r24, r18
    2cbc:	e0 0d       	add	r30, r0
    2cbe:	f1 1d       	adc	r31, r1
    2cc0:	64 9f       	mul	r22, r20
    2cc2:	e0 0d       	add	r30, r0
    2cc4:	f1 1d       	adc	r31, r1
    2cc6:	92 9f       	mul	r25, r18
    2cc8:	f0 0d       	add	r31, r0
    2cca:	83 9f       	mul	r24, r19
    2ccc:	f0 0d       	add	r31, r0
    2cce:	74 9f       	mul	r23, r20
    2cd0:	f0 0d       	add	r31, r0
    2cd2:	65 9f       	mul	r22, r21
    2cd4:	f0 0d       	add	r31, r0
    2cd6:	99 27       	eor	r25, r25
    2cd8:	72 9f       	mul	r23, r18
    2cda:	b0 0d       	add	r27, r0
    2cdc:	e1 1d       	adc	r30, r1
    2cde:	f9 1f       	adc	r31, r25
    2ce0:	63 9f       	mul	r22, r19
    2ce2:	b0 0d       	add	r27, r0
    2ce4:	e1 1d       	adc	r30, r1
    2ce6:	f9 1f       	adc	r31, r25
    2ce8:	bd 01       	movw	r22, r26
    2cea:	cf 01       	movw	r24, r30
    2cec:	11 24       	eor	r1, r1
    2cee:	08 95       	ret

00002cf0 <__udivmodsi4>:
    2cf0:	a1 e2       	ldi	r26, 0x21	; 33
    2cf2:	1a 2e       	mov	r1, r26
    2cf4:	aa 1b       	sub	r26, r26
    2cf6:	bb 1b       	sub	r27, r27
    2cf8:	fd 01       	movw	r30, r26
    2cfa:	0d c0       	rjmp	.+26     	; 0x2d16 <__udivmodsi4_ep>

00002cfc <__udivmodsi4_loop>:
    2cfc:	aa 1f       	adc	r26, r26
    2cfe:	bb 1f       	adc	r27, r27
    2d00:	ee 1f       	adc	r30, r30
    2d02:	ff 1f       	adc	r31, r31
    2d04:	a2 17       	cp	r26, r18
    2d06:	b3 07       	cpc	r27, r19
    2d08:	e4 07       	cpc	r30, r20
    2d0a:	f5 07       	cpc	r31, r21
    2d0c:	20 f0       	brcs	.+8      	; 0x2d16 <__udivmodsi4_ep>
    2d0e:	a2 1b       	sub	r26, r18
    2d10:	b3 0b       	sbc	r27, r19
    2d12:	e4 0b       	sbc	r30, r20
    2d14:	f5 0b       	sbc	r31, r21

00002d16 <__udivmodsi4_ep>:
    2d16:	66 1f       	adc	r22, r22
    2d18:	77 1f       	adc	r23, r23
    2d1a:	88 1f       	adc	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	1a 94       	dec	r1
    2d20:	69 f7       	brne	.-38     	; 0x2cfc <__udivmodsi4_loop>
    2d22:	60 95       	com	r22
    2d24:	70 95       	com	r23
    2d26:	80 95       	com	r24
    2d28:	90 95       	com	r25
    2d2a:	9b 01       	movw	r18, r22
    2d2c:	ac 01       	movw	r20, r24
    2d2e:	bd 01       	movw	r22, r26
    2d30:	cf 01       	movw	r24, r30
    2d32:	08 95       	ret

00002d34 <__prologue_saves__>:
    2d34:	2f 92       	push	r2
    2d36:	3f 92       	push	r3
    2d38:	4f 92       	push	r4
    2d3a:	5f 92       	push	r5
    2d3c:	6f 92       	push	r6
    2d3e:	7f 92       	push	r7
    2d40:	8f 92       	push	r8
    2d42:	9f 92       	push	r9
    2d44:	af 92       	push	r10
    2d46:	bf 92       	push	r11
    2d48:	cf 92       	push	r12
    2d4a:	df 92       	push	r13
    2d4c:	ef 92       	push	r14
    2d4e:	ff 92       	push	r15
    2d50:	0f 93       	push	r16
    2d52:	1f 93       	push	r17
    2d54:	cf 93       	push	r28
    2d56:	df 93       	push	r29
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
    2d5c:	ca 1b       	sub	r28, r26
    2d5e:	db 0b       	sbc	r29, r27
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	f8 94       	cli
    2d64:	de bf       	out	0x3e, r29	; 62
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	cd bf       	out	0x3d, r28	; 61
    2d6a:	09 94       	ijmp

00002d6c <__epilogue_restores__>:
    2d6c:	2a 88       	ldd	r2, Y+18	; 0x12
    2d6e:	39 88       	ldd	r3, Y+17	; 0x11
    2d70:	48 88       	ldd	r4, Y+16	; 0x10
    2d72:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d74:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d76:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d78:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d7a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d7c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d7e:	b9 84       	ldd	r11, Y+9	; 0x09
    2d80:	c8 84       	ldd	r12, Y+8	; 0x08
    2d82:	df 80       	ldd	r13, Y+7	; 0x07
    2d84:	ee 80       	ldd	r14, Y+6	; 0x06
    2d86:	fd 80       	ldd	r15, Y+5	; 0x05
    2d88:	0c 81       	ldd	r16, Y+4	; 0x04
    2d8a:	1b 81       	ldd	r17, Y+3	; 0x03
    2d8c:	aa 81       	ldd	r26, Y+2	; 0x02
    2d8e:	b9 81       	ldd	r27, Y+1	; 0x01
    2d90:	ce 0f       	add	r28, r30
    2d92:	d1 1d       	adc	r29, r1
    2d94:	0f b6       	in	r0, 0x3f	; 63
    2d96:	f8 94       	cli
    2d98:	de bf       	out	0x3e, r29	; 62
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	cd bf       	out	0x3d, r28	; 61
    2d9e:	ed 01       	movw	r28, r26
    2da0:	08 95       	ret

00002da2 <_exit>:
    2da2:	f8 94       	cli

00002da4 <__stop_program>:
    2da4:	ff cf       	rjmp	.-2      	; 0x2da4 <__stop_program>
